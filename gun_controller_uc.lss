
gun_controller_uc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00001546  000015da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001546  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008e  00800110  00800110  000015ea  2**0
                  ALLOC
  3 .debug_aranges 000000e0  00000000  00000000  000015ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002ab  00000000  00000000  000016ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000dab  00000000  00000000  00001975  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000370  00000000  00000000  00002720  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001262  00000000  00000000  00002a90  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000180  00000000  00000000  00003cf4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005c4  00000000  00000000  00003e74  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ada  00000000  00000000  00004438  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e8  00000000  00000000  00004f12  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	}
}

// transmit a character.  0 returned on success, -1 on error
int8_t usb_serial_putchar(uint8_t c)
{
       0:	ff c0       	rjmp	.+510    	; 0x200 <__ctors_end>
       2:	00 00       	nop
       4:	1b c1       	rjmp	.+566    	; 0x23c <__bad_interrupt>
       6:	00 00       	nop
       8:	19 c1       	rjmp	.+562    	; 0x23c <__bad_interrupt>
       a:	00 00       	nop
       c:	17 c1       	rjmp	.+558    	; 0x23c <__bad_interrupt>
       e:	00 00       	nop
      10:	15 c1       	rjmp	.+554    	; 0x23c <__bad_interrupt>
      12:	00 00       	nop
      14:	13 c1       	rjmp	.+550    	; 0x23c <__bad_interrupt>
      16:	00 00       	nop
      18:	11 c1       	rjmp	.+546    	; 0x23c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	0f c1       	rjmp	.+542    	; 0x23c <__bad_interrupt>
      1e:	00 00       	nop
      20:	0d c1       	rjmp	.+538    	; 0x23c <__bad_interrupt>
      22:	00 00       	nop
      24:	0b c1       	rjmp	.+534    	; 0x23c <__bad_interrupt>
      26:	00 00       	nop
      28:	60 c7       	rjmp	.+3776   	; 0xeea <__vector_10>
      2a:	00 00       	nop
      2c:	99 c7       	rjmp	.+3890   	; 0xf60 <__vector_11>
      2e:	00 00       	nop
      30:	05 c1       	rjmp	.+522    	; 0x23c <__bad_interrupt>
      32:	00 00       	nop
      34:	03 c1       	rjmp	.+518    	; 0x23c <__bad_interrupt>
      36:	00 00       	nop
      38:	01 c1       	rjmp	.+514    	; 0x23c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	ff c0       	rjmp	.+510    	; 0x23c <__bad_interrupt>
      3e:	00 00       	nop
      40:	fd c0       	rjmp	.+506    	; 0x23c <__bad_interrupt>
      42:	00 00       	nop
      44:	fb c0       	rjmp	.+502    	; 0x23c <__bad_interrupt>
      46:	00 00       	nop
      48:	f9 c0       	rjmp	.+498    	; 0x23c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	f7 c0       	rjmp	.+494    	; 0x23c <__bad_interrupt>
      4e:	00 00       	nop
      50:	f5 c0       	rjmp	.+490    	; 0x23c <__bad_interrupt>
      52:	00 00       	nop
      54:	f3 c0       	rjmp	.+486    	; 0x23c <__bad_interrupt>
      56:	00 00       	nop
      58:	f1 c0       	rjmp	.+482    	; 0x23c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	ef c0       	rjmp	.+478    	; 0x23c <__bad_interrupt>
      5e:	00 00       	nop
      60:	ed c0       	rjmp	.+474    	; 0x23c <__bad_interrupt>
      62:	00 00       	nop
      64:	eb c0       	rjmp	.+470    	; 0x23c <__bad_interrupt>
      66:	00 00       	nop
      68:	e9 c0       	rjmp	.+466    	; 0x23c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	e7 c0       	rjmp	.+462    	; 0x23c <__bad_interrupt>
      6e:	00 00       	nop
      70:	e5 c0       	rjmp	.+458    	; 0x23c <__bad_interrupt>
      72:	00 00       	nop
      74:	87 c2       	rjmp	.+1294   	; 0x584 <__vector_29>
      76:	00 00       	nop
      78:	e1 c0       	rjmp	.+450    	; 0x23c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	df c0       	rjmp	.+446    	; 0x23c <__bad_interrupt>
      7e:	00 00       	nop
      80:	dd c0       	rjmp	.+442    	; 0x23c <__bad_interrupt>
      82:	00 00       	nop
      84:	db c0       	rjmp	.+438    	; 0x23c <__bad_interrupt>
      86:	00 00       	nop
      88:	d9 c0       	rjmp	.+434    	; 0x23c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	d7 c0       	rjmp	.+430    	; 0x23c <__bad_interrupt>
      8e:	00 00       	nop
      90:	d5 c0       	rjmp	.+426    	; 0x23c <__bad_interrupt>
      92:	00 00       	nop
      94:	d3 c0       	rjmp	.+422    	; 0x23c <__bad_interrupt>
      96:	00 00       	nop
      98:	58 07       	cpc	r21, r24
      9a:	55 07       	cpc	r21, r21
      9c:	52 07       	cpc	r21, r18
      9e:	4f 07       	cpc	r20, r31
      a0:	4c 07       	cpc	r20, r28
      a2:	49 07       	cpc	r20, r25
      a4:	46 07       	cpc	r20, r22
      a6:	43 07       	cpc	r20, r19
      a8:	40 07       	cpc	r20, r16
      aa:	3d 07       	cpc	r19, r29
      ac:	3a 07       	cpc	r19, r26
      ae:	37 07       	cpc	r19, r23
      b0:	34 07       	cpc	r19, r20
      b2:	31 07       	cpc	r19, r17
      b4:	2e 07       	cpc	r18, r30
      b6:	2b 07       	cpc	r18, r27
      b8:	28 07       	cpc	r18, r24
      ba:	25 07       	cpc	r18, r21
      bc:	22 07       	cpc	r18, r18
      be:	1f 07       	cpc	r17, r31
      c0:	1c 07       	cpc	r17, r28
      c2:	19 07       	cpc	r17, r25
      c4:	16 07       	cpc	r17, r22
      c6:	13 07       	cpc	r17, r19
      c8:	10 07       	cpc	r17, r16
      ca:	0d 07       	cpc	r16, r29
      cc:	0a 07       	cpc	r16, r26
      ce:	07 07       	cpc	r16, r23
      d0:	04 07       	cpc	r16, r20
      d2:	01 07       	cpc	r16, r17
      d4:	fe 06       	cpc	r15, r30
      d6:	fb 06       	cpc	r15, r27
      d8:	f8 06       	cpc	r15, r24
      da:	f5 06       	cpc	r15, r21
      dc:	f2 06       	cpc	r15, r18
      de:	ef 06       	cpc	r14, r31
      e0:	ec 06       	cpc	r14, r28
      e2:	e9 06       	cpc	r14, r25
      e4:	e6 06       	cpc	r14, r22
      e6:	e3 06       	cpc	r14, r19
      e8:	e0 06       	cpc	r14, r16
      ea:	dd 06       	cpc	r13, r29
      ec:	da 06       	cpc	r13, r26
      ee:	d7 06       	cpc	r13, r23
      f0:	d4 06       	cpc	r13, r20
      f2:	d1 06       	cpc	r13, r17
      f4:	ce 06       	cpc	r12, r30
      f6:	cb 06       	cpc	r12, r27
      f8:	c8 06       	cpc	r12, r24
      fa:	c5 06       	cpc	r12, r21
      fc:	c2 06       	cpc	r12, r18
      fe:	bf 06       	cpc	r11, r31
     100:	bc 06       	cpc	r11, r28
     102:	b9 06       	cpc	r11, r25
     104:	b6 06       	cpc	r11, r22
     106:	b3 06       	cpc	r11, r19
     108:	b0 06       	cpc	r11, r16
     10a:	ad 06       	cpc	r10, r29
     10c:	aa 06       	cpc	r10, r26
     10e:	a7 06       	cpc	r10, r23
     110:	a4 06       	cpc	r10, r20
     112:	a1 06       	cpc	r10, r17
     114:	9e 06       	cpc	r9, r30
     116:	9b 06       	cpc	r9, r27
     118:	98 06       	cpc	r9, r24

0000011a <descriptor_list>:
     11a:	00 01 00 00 4e 01 12 00 02 00 00 60 01 43 00 03     ....N......`.C..
     12a:	00 00 a3 01 04 01 03 09 04 a7 01 1a 02 03 09 04     ................
     13a:	c3 01 2c 03 03 09 04 f1 01 0c                       ..,.......

00000144 <endpoint_config_table>:
     144:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

0000014e <device_descriptor>:
     14e:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     15e:	03 01                                               ..

00000160 <config1_descriptor>:
     160:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     170:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     180:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     190:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     1a0:	40 00 00                                            @..

000001a3 <string0>:
     1a3:	04 03 09 04                                         ....

000001a7 <string1>:
     1a7:	1a 03 4a 00 61 00 6d 00 65 00 73 00 20 00 4d 00     ..J.a.m.e.s. .M.
     1b7:	6f 00 72 00 72 00 69 00 73 00 00 00                 o.r.r.i.s...

000001c3 <string2>:
     1c3:	2c 03 47 00 75 00 6e 00 20 00 43 00 6f 00 6e 00     ,.G.u.n. .C.o.n.
     1d3:	74 00 72 00 6f 00 6c 00 6c 00 65 00 72 00 20 00     t.r.o.l.l.e.r. .
     1e3:	53 00 65 00 72 00 69 00 61 00 6c 00 00 00           S.e.r.i.a.l...

000001f1 <string3>:
     1f1:	0c 03 30 00 30 00 30 00 30 00 31 00 00 00 00        ..0.0.0.0.1....

00000200 <__ctors_end>:
     200:	11 24       	eor	r1, r1
     202:	1f be       	out	0x3f, r1	; 63
     204:	cf ef       	ldi	r28, 0xFF	; 255
     206:	d0 e2       	ldi	r29, 0x20	; 32
     208:	de bf       	out	0x3e, r29	; 62
     20a:	cd bf       	out	0x3d, r28	; 61

0000020c <__do_copy_data>:
     20c:	11 e0       	ldi	r17, 0x01	; 1
     20e:	a0 e0       	ldi	r26, 0x00	; 0
     210:	b1 e0       	ldi	r27, 0x01	; 1
     212:	e6 e4       	ldi	r30, 0x46	; 70
     214:	f5 e1       	ldi	r31, 0x15	; 21
     216:	00 e0       	ldi	r16, 0x00	; 0
     218:	0b bf       	out	0x3b, r16	; 59
     21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
     21c:	07 90       	elpm	r0, Z+
     21e:	0d 92       	st	X+, r0
     220:	a0 31       	cpi	r26, 0x10	; 16
     222:	b1 07       	cpc	r27, r17
     224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>

00000226 <__do_clear_bss>:
     226:	11 e0       	ldi	r17, 0x01	; 1
     228:	a0 e1       	ldi	r26, 0x10	; 16
     22a:	b1 e0       	ldi	r27, 0x01	; 1
     22c:	01 c0       	rjmp	.+2      	; 0x230 <.do_clear_bss_start>

0000022e <.do_clear_bss_loop>:
     22e:	1d 92       	st	X+, r1

00000230 <.do_clear_bss_start>:
     230:	ae 39       	cpi	r26, 0x9E	; 158
     232:	b1 07       	cpc	r27, r17
     234:	e1 f7       	brne	.-8      	; 0x22e <.do_clear_bss_loop>
     236:	4e d4       	rcall	.+2204   	; 0xad4 <main>
     238:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <_exit>

0000023c <__bad_interrupt>:
     23c:	e1 ce       	rjmp	.-574    	; 0x0 <__vectors>

0000023e <packData>:
		}
	}
}

void packData(void){
	buffer[0] = PACKET_START_1;
     23e:	a6 e3       	ldi	r26, 0x36	; 54
     240:	b1 e0       	ldi	r27, 0x01	; 1
     242:	86 e6       	ldi	r24, 0x66	; 102
     244:	80 93 36 01 	sts	0x0136, r24
	buffer[1] = PACKET_START_2;
     248:	80 93 37 01 	sts	0x0137, r24
	
	buffer[2] = DATA_ANALOG_1;
     24c:	81 e0       	ldi	r24, 0x01	; 1
     24e:	80 93 38 01 	sts	0x0138, r24
		buffer[3] = (data.analog_1 >> 8);
     252:	e6 e7       	ldi	r30, 0x76	; 118
     254:	f1 e0       	ldi	r31, 0x01	; 1
     256:	90 91 76 01 	lds	r25, 0x0176
     25a:	80 91 77 01 	lds	r24, 0x0177
     25e:	80 93 39 01 	sts	0x0139, r24
		buffer[4] = data.analog_1 & 0xFF;
     262:	90 93 3a 01 	sts	0x013A, r25
		
	buffer[5] = DATA_ANALOG_2;
     266:	82 e0       	ldi	r24, 0x02	; 2
     268:	80 93 3b 01 	sts	0x013B, r24
		buffer[6] = (data.analog_2 >> 8);
     26c:	90 91 78 01 	lds	r25, 0x0178
     270:	83 81       	ldd	r24, Z+3	; 0x03
     272:	80 93 3c 01 	sts	0x013C, r24
		buffer[7] = data.analog_2 & 0xFF;
     276:	90 93 3d 01 	sts	0x013D, r25
		
	buffer[8] = DATA_ANALOG_3;
     27a:	83 e0       	ldi	r24, 0x03	; 3
     27c:	80 93 3e 01 	sts	0x013E, r24
		buffer[9] = (data.analog_3 >> 8);
     280:	90 91 7a 01 	lds	r25, 0x017A
     284:	85 81       	ldd	r24, Z+5	; 0x05
     286:	80 93 3f 01 	sts	0x013F, r24
		buffer[10] = data.analog_3 & 0xFF;
     28a:	90 93 40 01 	sts	0x0140, r25
		
	buffer[11] = DATA_ANALOG_4;
     28e:	84 e0       	ldi	r24, 0x04	; 4
     290:	80 93 41 01 	sts	0x0141, r24
		buffer[12] = (data.analog_4 >> 8);
     294:	90 91 7c 01 	lds	r25, 0x017C
     298:	87 81       	ldd	r24, Z+7	; 0x07
     29a:	80 93 42 01 	sts	0x0142, r24
		buffer[13] = data.analog_4 & 0xFF;
     29e:	90 93 43 01 	sts	0x0143, r25
		
	buffer[14] = DATA_ANALOG_5;
     2a2:	85 e0       	ldi	r24, 0x05	; 5
     2a4:	80 93 44 01 	sts	0x0144, r24
		buffer[15] = (data.analog_5 >> 8);
     2a8:	90 91 7e 01 	lds	r25, 0x017E
     2ac:	81 85       	ldd	r24, Z+9	; 0x09
     2ae:	80 93 45 01 	sts	0x0145, r24
		buffer[16] = data.analog_5 & 0xFF;
     2b2:	90 93 46 01 	sts	0x0146, r25
		
	buffer[17] = DATA_ANALOG_6;
     2b6:	86 e0       	ldi	r24, 0x06	; 6
     2b8:	80 93 47 01 	sts	0x0147, r24
		buffer[18] = (data.analog_6 >> 8);
     2bc:	90 91 80 01 	lds	r25, 0x0180
     2c0:	83 85       	ldd	r24, Z+11	; 0x0b
     2c2:	80 93 48 01 	sts	0x0148, r24
		buffer[19] = data.analog_6 & 0xFF;
     2c6:	90 93 49 01 	sts	0x0149, r25
		
	buffer[20] = DATA_ANALOG_7;
     2ca:	87 e0       	ldi	r24, 0x07	; 7
     2cc:	80 93 4a 01 	sts	0x014A, r24
		buffer[21] = (data.analog_7 >> 8);
     2d0:	90 91 82 01 	lds	r25, 0x0182
     2d4:	85 85       	ldd	r24, Z+13	; 0x0d
     2d6:	80 93 4b 01 	sts	0x014B, r24
		buffer[22] = data.analog_7 & 0xFF;
     2da:	90 93 4c 01 	sts	0x014C, r25
		
	buffer[23] = DATA_ANALOG_8;
     2de:	88 e0       	ldi	r24, 0x08	; 8
     2e0:	80 93 4d 01 	sts	0x014D, r24
		buffer[24] = (data.analog_8 >> 8);
     2e4:	90 91 84 01 	lds	r25, 0x0184
     2e8:	87 85       	ldd	r24, Z+15	; 0x0f
     2ea:	80 93 4e 01 	sts	0x014E, r24
		buffer[25] = data.analog_8 & 0xFF;
     2ee:	90 93 4f 01 	sts	0x014F, r25
		
	buffer[26] = DATA_ANALOG_9;
     2f2:	89 e0       	ldi	r24, 0x09	; 9
     2f4:	80 93 50 01 	sts	0x0150, r24
		buffer[27] = (data.analog_9 >> 8);
     2f8:	90 91 86 01 	lds	r25, 0x0186
     2fc:	81 89       	ldd	r24, Z+17	; 0x11
     2fe:	80 93 51 01 	sts	0x0151, r24
		buffer[28] = data.analog_9 & 0xFF;
     302:	90 93 52 01 	sts	0x0152, r25
		
	buffer[29] = DATA_ANALOG_10;
     306:	8a e0       	ldi	r24, 0x0A	; 10
     308:	80 93 53 01 	sts	0x0153, r24
		buffer[30] = (data.analog_10 >> 8);
     30c:	90 91 88 01 	lds	r25, 0x0188
     310:	83 89       	ldd	r24, Z+19	; 0x13
     312:	80 93 54 01 	sts	0x0154, r24
		buffer[31] = data.analog_10 & 0xFF;
     316:	90 93 55 01 	sts	0x0155, r25
		
	buffer[32] = DATA_ANALOG_11;
     31a:	8b e0       	ldi	r24, 0x0B	; 11
     31c:	80 93 56 01 	sts	0x0156, r24
		buffer[33] = (data.analog_11 >> 8);
     320:	90 91 8a 01 	lds	r25, 0x018A
     324:	85 89       	ldd	r24, Z+21	; 0x15
     326:	80 93 57 01 	sts	0x0157, r24
		buffer[34] = data.analog_11 & 0xFF;
     32a:	90 93 58 01 	sts	0x0158, r25
		
	buffer[35] = DATA_ANALOG_12;
     32e:	8c e0       	ldi	r24, 0x0C	; 12
     330:	80 93 59 01 	sts	0x0159, r24
		buffer[36] = (data.analog_12 >> 8);
     334:	90 91 8c 01 	lds	r25, 0x018C
     338:	87 89       	ldd	r24, Z+23	; 0x17
     33a:	80 93 5a 01 	sts	0x015A, r24
		buffer[37] = data.analog_12 & 0xFF;
     33e:	90 93 5b 01 	sts	0x015B, r25
		
	buffer[38] = DATA_ANALOG_13;
     342:	8d e0       	ldi	r24, 0x0D	; 13
     344:	80 93 5c 01 	sts	0x015C, r24
		buffer[39] = (data.analog_13 >> 8);
     348:	90 91 8e 01 	lds	r25, 0x018E
     34c:	81 8d       	ldd	r24, Z+25	; 0x19
     34e:	80 93 5d 01 	sts	0x015D, r24
		buffer[40] = data.analog_13 & 0xFF;
     352:	90 93 5e 01 	sts	0x015E, r25
		
	buffer[41] = DATA_ANALOG_14;
     356:	8e e0       	ldi	r24, 0x0E	; 14
     358:	80 93 5f 01 	sts	0x015F, r24
		buffer[42] = (data.analog_14 >> 8);
     35c:	90 91 90 01 	lds	r25, 0x0190
     360:	83 8d       	ldd	r24, Z+27	; 0x1b
     362:	80 93 60 01 	sts	0x0160, r24
		buffer[43] = data.analog_14 & 0xFF;
     366:	90 93 61 01 	sts	0x0161, r25
		
	buffer[44] = DATA_ANALOG_15;
     36a:	8f e0       	ldi	r24, 0x0F	; 15
     36c:	80 93 62 01 	sts	0x0162, r24
		buffer[45] = (data.analog_15 >> 8);
     370:	90 91 92 01 	lds	r25, 0x0192
     374:	85 8d       	ldd	r24, Z+29	; 0x1d
     376:	80 93 63 01 	sts	0x0163, r24
		buffer[46] = data.analog_15 & 0xFF;
     37a:	90 93 64 01 	sts	0x0164, r25
		
	buffer[47] = DATA_ANALOG_16;
     37e:	80 e1       	ldi	r24, 0x10	; 16
     380:	80 93 65 01 	sts	0x0165, r24
		buffer[48] = (data.analog_16 >> 8);
     384:	90 91 94 01 	lds	r25, 0x0194
     388:	87 8d       	ldd	r24, Z+31	; 0x1f
     38a:	80 93 66 01 	sts	0x0166, r24
		buffer[49] = data.analog_16 & 0xFF;
     38e:	90 93 67 01 	sts	0x0167, r25
		
	buffer[50] = DATA_DIGITAL_1;
     392:	81 e1       	ldi	r24, 0x11	; 17
     394:	80 93 68 01 	sts	0x0168, r24
		buffer[51] = (data.digital_1 >> 8);
     398:	90 91 96 01 	lds	r25, 0x0196
     39c:	81 a1       	ldd	r24, Z+33	; 0x21
     39e:	80 93 69 01 	sts	0x0169, r24
		buffer[52] = data.digital_1 & 0xFF;
     3a2:	90 93 6a 01 	sts	0x016A, r25
		
	buffer[53] = DATA_DIGITAL_2;
     3a6:	82 e1       	ldi	r24, 0x12	; 18
     3a8:	80 93 6b 01 	sts	0x016B, r24
		buffer[54] = (data.digital_2 >> 8);
     3ac:	90 91 98 01 	lds	r25, 0x0198
     3b0:	83 a1       	ldd	r24, Z+35	; 0x23
     3b2:	80 93 6c 01 	sts	0x016C, r24
		buffer[55] = data.digital_2 & 0xFF;
     3b6:	90 93 6d 01 	sts	0x016D, r25
		
	buffer[56] = DATA_DIGITAL_3;
     3ba:	83 e1       	ldi	r24, 0x13	; 19
     3bc:	80 93 6e 01 	sts	0x016E, r24
		buffer[57] = (data.digital_3 >> 8);
     3c0:	90 91 9a 01 	lds	r25, 0x019A
     3c4:	85 a1       	ldd	r24, Z+37	; 0x25
     3c6:	80 93 6f 01 	sts	0x016F, r24
		buffer[58] = data.digital_3 & 0xFF;
     3ca:	90 93 70 01 	sts	0x0170, r25
		
	buffer[59] = DATA_DIGITAL_4;
     3ce:	84 e1       	ldi	r24, 0x14	; 20
     3d0:	80 93 71 01 	sts	0x0171, r24
		buffer[60] = (data.digital_4 >> 8);
     3d4:	90 91 9c 01 	lds	r25, 0x019C
     3d8:	87 a1       	ldd	r24, Z+39	; 0x27
     3da:	80 93 72 01 	sts	0x0172, r24
		buffer[61] = data.digital_4 & 0xFF;
     3de:	dd 96       	adiw	r26, 0x3d	; 61
     3e0:	9c 93       	st	X, r25
     3e2:	dd 97       	sbiw	r26, 0x3d	; 61
	
	buffer[PACKET_SIZE-2] = PACKET_END_1;
     3e4:	82 e4       	ldi	r24, 0x42	; 66
     3e6:	de 96       	adiw	r26, 0x3e	; 62
     3e8:	8c 93       	st	X, r24
     3ea:	de 97       	sbiw	r26, 0x3e	; 62
	buffer[PACKET_SIZE-1] = PACKET_END_2;
     3ec:	df 96       	adiw	r26, 0x3f	; 63
     3ee:	8c 93       	st	X, r24
}
     3f0:	08 95       	ret

000003f2 <read_buttons>:
	_delay_ms(1000);
}

//<-----------------------------------Read and debounce button input---------------------------------->
void read_buttons(void)
{
     3f2:	4f 92       	push	r4
     3f4:	5f 92       	push	r5
     3f6:	6f 92       	push	r6
     3f8:	7f 92       	push	r7
     3fa:	8f 92       	push	r8
     3fc:	9f 92       	push	r9
     3fe:	af 92       	push	r10
     400:	bf 92       	push	r11
     402:	cf 92       	push	r12
     404:	df 92       	push	r13
     406:	ef 92       	push	r14
     408:	ff 92       	push	r15
     40a:	0f 93       	push	r16
     40c:	1f 93       	push	r17
     40e:	cf 93       	push	r28
     410:	df 93       	push	r29
     412:	70 90 03 01 	lds	r7, 0x0103
     416:	80 90 02 01 	lds	r8, 0x0102
     41a:	22 e2       	ldi	r18, 0x22	; 34
     41c:	c2 2e       	mov	r12, r18
     41e:	21 e0       	ldi	r18, 0x01	; 1
     420:	d2 2e       	mov	r13, r18
     422:	9a e1       	ldi	r25, 0x1A	; 26
     424:	e9 2e       	mov	r14, r25
     426:	91 e0       	ldi	r25, 0x01	; 1
     428:	f9 2e       	mov	r15, r25
     42a:	02 e1       	ldi	r16, 0x12	; 18
     42c:	11 e0       	ldi	r17, 0x01	; 1
     42e:	ca e2       	ldi	r28, 0x2A	; 42
     430:	d1 e0       	ldi	r29, 0x01	; 1
     432:	aa 24       	eor	r10, r10
     434:	bb 24       	eor	r11, r11
		//analog style filter for the button inputs
		old_d[i] = old_d[i] * .75;
		if(bit_is_clear(PIND, i)){old_d[i] = old_d[i] + 0x3F;}
		//trigger to switch when the analog value gets high or low
		if((old_d[i] > 0xF0)&&(flag_d[i]==0)){flag_d[i]=1; digital_d &= ~(1 << i);}
		if((old_d[i] < 0x0F)&&(flag_d[i]==1)){flag_d[i]=0; digital_d |= (1 << i);}
     436:	81 e0       	ldi	r24, 0x01	; 1
     438:	48 2e       	mov	r4, r24
     43a:	51 2c       	mov	r5, r1
		//PIND
		//analog style filter for the button inputs
		old_d[i] = old_d[i] * .75;
		if(bit_is_clear(PIND, i)){old_d[i] = old_d[i] + 0x3F;}
		//trigger to switch when the analog value gets high or low
		if((old_d[i] > 0xF0)&&(flag_d[i]==0)){flag_d[i]=1; digital_d &= ~(1 << i);}
     43c:	66 24       	eor	r6, r6
     43e:	63 94       	inc	r6
	_delay_ms(1000);
}

//<-----------------------------------Read and debounce button input---------------------------------->
void read_buttons(void)
{
     440:	9a 2c       	mov	r9, r10
	
	for(i=0;i<8;i++)
	{
		//PIND
		//analog style filter for the button inputs
		old_d[i] = old_d[i] * .75;
     442:	f6 01       	movw	r30, r12
     444:	60 81       	ld	r22, Z
     446:	70 e0       	ldi	r23, 0x00	; 0
     448:	88 27       	eor	r24, r24
     44a:	77 fd       	sbrc	r23, 7
     44c:	80 95       	com	r24
     44e:	98 2f       	mov	r25, r24
     450:	89 d7       	rcall	.+3858   	; 0x1364 <__floatsisf>
     452:	20 e0       	ldi	r18, 0x00	; 0
     454:	30 e0       	ldi	r19, 0x00	; 0
     456:	40 e4       	ldi	r20, 0x40	; 64
     458:	5f e3       	ldi	r21, 0x3F	; 63
     45a:	0e 94 3e 0a 	call	0x147c	; 0x147c <__mulsf3>
     45e:	54 d7       	rcall	.+3752   	; 0x1308 <__fixunssfsi>
     460:	26 2f       	mov	r18, r22
     462:	f6 01       	movw	r30, r12
     464:	60 83       	st	Z, r22
		if(bit_is_clear(PIND, i)){old_d[i] = old_d[i] + 0x3F;}
     466:	89 b1       	in	r24, 0x09	; 9
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	0a 2c       	mov	r0, r10
     46c:	02 c0       	rjmp	.+4      	; 0x472 <read_buttons+0x80>
     46e:	95 95       	asr	r25
     470:	87 95       	ror	r24
     472:	0a 94       	dec	r0
     474:	e2 f7       	brpl	.-8      	; 0x46e <read_buttons+0x7c>
     476:	80 fd       	sbrc	r24, 0
     478:	02 c0       	rjmp	.+4      	; 0x47e <read_buttons+0x8c>
     47a:	21 5c       	subi	r18, 0xC1	; 193
     47c:	20 83       	st	Z, r18
		//trigger to switch when the analog value gets high or low
		if((old_d[i] > 0xF0)&&(flag_d[i]==0)){flag_d[i]=1; digital_d &= ~(1 << i);}
     47e:	f6 01       	movw	r30, r12
     480:	80 81       	ld	r24, Z
     482:	81 3f       	cpi	r24, 0xF1	; 241
     484:	70 f0       	brcs	.+28     	; 0x4a2 <read_buttons+0xb0>
     486:	88 81       	ld	r24, Y
     488:	88 23       	and	r24, r24
     48a:	c9 f4       	brne	.+50     	; 0x4be <read_buttons+0xcc>
     48c:	68 82       	st	Y, r6
     48e:	c2 01       	movw	r24, r4
     490:	09 2c       	mov	r0, r9
     492:	02 c0       	rjmp	.+4      	; 0x498 <read_buttons+0xa6>
     494:	88 0f       	add	r24, r24
     496:	99 1f       	adc	r25, r25
     498:	0a 94       	dec	r0
     49a:	e2 f7       	brpl	.-8      	; 0x494 <read_buttons+0xa2>
     49c:	80 95       	com	r24
     49e:	78 22       	and	r7, r24
     4a0:	0e c0       	rjmp	.+28     	; 0x4be <read_buttons+0xcc>
		if((old_d[i] < 0x0F)&&(flag_d[i]==1)){flag_d[i]=0; digital_d |= (1 << i);}
     4a2:	8f 30       	cpi	r24, 0x0F	; 15
     4a4:	60 f4       	brcc	.+24     	; 0x4be <read_buttons+0xcc>
     4a6:	88 81       	ld	r24, Y
     4a8:	81 30       	cpi	r24, 0x01	; 1
     4aa:	49 f4       	brne	.+18     	; 0x4be <read_buttons+0xcc>
     4ac:	18 82       	st	Y, r1
     4ae:	c2 01       	movw	r24, r4
     4b0:	09 2c       	mov	r0, r9
     4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <read_buttons+0xc6>
     4b4:	88 0f       	add	r24, r24
     4b6:	99 1f       	adc	r25, r25
     4b8:	0a 94       	dec	r0
     4ba:	e2 f7       	brpl	.-8      	; 0x4b4 <read_buttons+0xc2>
     4bc:	78 2a       	or	r7, r24
		//PINC
		//analog style filter for the button inputs
		old_c[i] = old_c[i] * .75;
     4be:	f8 01       	movw	r30, r16
     4c0:	60 81       	ld	r22, Z
     4c2:	70 e0       	ldi	r23, 0x00	; 0
     4c4:	88 27       	eor	r24, r24
     4c6:	77 fd       	sbrc	r23, 7
     4c8:	80 95       	com	r24
     4ca:	98 2f       	mov	r25, r24
     4cc:	4b d7       	rcall	.+3734   	; 0x1364 <__floatsisf>
     4ce:	20 e0       	ldi	r18, 0x00	; 0
     4d0:	30 e0       	ldi	r19, 0x00	; 0
     4d2:	40 e4       	ldi	r20, 0x40	; 64
     4d4:	5f e3       	ldi	r21, 0x3F	; 63
     4d6:	d2 d7       	rcall	.+4004   	; 0x147c <__mulsf3>
     4d8:	17 d7       	rcall	.+3630   	; 0x1308 <__fixunssfsi>
     4da:	26 2f       	mov	r18, r22
     4dc:	f8 01       	movw	r30, r16
     4de:	60 83       	st	Z, r22
		if(bit_is_clear(PINC, i)){old_c[i] = old_c[i] + 0x3F;}
     4e0:	86 b1       	in	r24, 0x06	; 6
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	09 2c       	mov	r0, r9
     4e6:	02 c0       	rjmp	.+4      	; 0x4ec <read_buttons+0xfa>
     4e8:	95 95       	asr	r25
     4ea:	87 95       	ror	r24
     4ec:	0a 94       	dec	r0
     4ee:	e2 f7       	brpl	.-8      	; 0x4e8 <read_buttons+0xf6>
     4f0:	80 fd       	sbrc	r24, 0
     4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <read_buttons+0x106>
     4f4:	21 5c       	subi	r18, 0xC1	; 193
     4f6:	20 83       	st	Z, r18
		//trigger to switch when the analog value gets high or low
		if((old_c[i] > 0xF0)&&(flag_c[i]==0)){flag_c[i]=1; digital_c &= ~(1 << i);}
     4f8:	f8 01       	movw	r30, r16
     4fa:	80 81       	ld	r24, Z
     4fc:	81 3f       	cpi	r24, 0xF1	; 241
     4fe:	70 f0       	brcs	.+28     	; 0x51c <read_buttons+0x12a>
     500:	f7 01       	movw	r30, r14
     502:	80 81       	ld	r24, Z
     504:	88 23       	and	r24, r24
     506:	c1 f4       	brne	.+48     	; 0x538 <read_buttons+0x146>
     508:	60 82       	st	Z, r6
     50a:	c2 01       	movw	r24, r4
     50c:	02 c0       	rjmp	.+4      	; 0x512 <read_buttons+0x120>
     50e:	88 0f       	add	r24, r24
     510:	99 1f       	adc	r25, r25
     512:	9a 94       	dec	r9
     514:	e2 f7       	brpl	.-8      	; 0x50e <read_buttons+0x11c>
     516:	80 95       	com	r24
     518:	88 22       	and	r8, r24
     51a:	0e c0       	rjmp	.+28     	; 0x538 <read_buttons+0x146>
		if((old_c[i] < 0x0F)&&(flag_c[i]==1)){flag_c[i]=0; digital_c |= (1 << i);}
     51c:	8f 30       	cpi	r24, 0x0F	; 15
     51e:	60 f4       	brcc	.+24     	; 0x538 <read_buttons+0x146>
     520:	f7 01       	movw	r30, r14
     522:	80 81       	ld	r24, Z
     524:	81 30       	cpi	r24, 0x01	; 1
     526:	41 f4       	brne	.+16     	; 0x538 <read_buttons+0x146>
     528:	10 82       	st	Z, r1
     52a:	c2 01       	movw	r24, r4
     52c:	02 c0       	rjmp	.+4      	; 0x532 <read_buttons+0x140>
     52e:	88 0f       	add	r24, r24
     530:	99 1f       	adc	r25, r25
     532:	9a 94       	dec	r9
     534:	e2 f7       	brpl	.-8      	; 0x52e <read_buttons+0x13c>
     536:	88 2a       	or	r8, r24
     538:	08 94       	sec
     53a:	a1 1c       	adc	r10, r1
     53c:	b1 1c       	adc	r11, r1
     53e:	08 94       	sec
     540:	c1 1c       	adc	r12, r1
     542:	d1 1c       	adc	r13, r1
     544:	08 94       	sec
     546:	e1 1c       	adc	r14, r1
     548:	f1 1c       	adc	r15, r1
     54a:	0f 5f       	subi	r16, 0xFF	; 255
     54c:	1f 4f       	sbci	r17, 0xFF	; 255
     54e:	21 96       	adiw	r28, 0x01	; 1
	static uint8_t old_d[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	uint8_t i;
	static uint8_t flag_c[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	static uint8_t old_c[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	
	for(i=0;i<8;i++)
     550:	f8 e0       	ldi	r31, 0x08	; 8
     552:	af 16       	cp	r10, r31
     554:	b1 04       	cpc	r11, r1
     556:	09 f0       	breq	.+2      	; 0x55a <read_buttons+0x168>
     558:	73 cf       	rjmp	.-282    	; 0x440 <read_buttons+0x4e>
     55a:	70 92 03 01 	sts	0x0103, r7
     55e:	80 92 02 01 	sts	0x0102, r8
		//trigger to switch when the analog value gets high or low
		if((old_c[i] > 0xF0)&&(flag_c[i]==0)){flag_c[i]=1; digital_c &= ~(1 << i);}
		if((old_c[i] < 0x0F)&&(flag_c[i]==1)){flag_c[i]=0; digital_c |= (1 << i);}
	}
	//debounced values are stored in digital_d and digital_c
}
     562:	df 91       	pop	r29
     564:	cf 91       	pop	r28
     566:	1f 91       	pop	r17
     568:	0f 91       	pop	r16
     56a:	ff 90       	pop	r15
     56c:	ef 90       	pop	r14
     56e:	df 90       	pop	r13
     570:	cf 90       	pop	r12
     572:	bf 90       	pop	r11
     574:	af 90       	pop	r10
     576:	9f 90       	pop	r9
     578:	8f 90       	pop	r8
     57a:	7f 90       	pop	r7
     57c:	6f 90       	pop	r6
     57e:	5f 90       	pop	r5
     580:	4f 90       	pop	r4
     582:	08 95       	ret

00000584 <__vector_29>:

ISR(ADC_vect)
{	
     584:	1f 92       	push	r1
     586:	0f 92       	push	r0
     588:	0f b6       	in	r0, 0x3f	; 63
     58a:	0f 92       	push	r0
     58c:	0b b6       	in	r0, 0x3b	; 59
     58e:	0f 92       	push	r0
     590:	11 24       	eor	r1, r1
     592:	af 92       	push	r10
     594:	bf 92       	push	r11
     596:	cf 92       	push	r12
     598:	df 92       	push	r13
     59a:	ef 92       	push	r14
     59c:	ff 92       	push	r15
     59e:	0f 93       	push	r16
     5a0:	1f 93       	push	r17
     5a2:	2f 93       	push	r18
     5a4:	3f 93       	push	r19
     5a6:	4f 93       	push	r20
     5a8:	5f 93       	push	r21
     5aa:	6f 93       	push	r22
     5ac:	7f 93       	push	r23
     5ae:	8f 93       	push	r24
     5b0:	9f 93       	push	r25
     5b2:	af 93       	push	r26
     5b4:	bf 93       	push	r27
     5b6:	ef 93       	push	r30
     5b8:	ff 93       	push	r31
	//first entry assumes ADMUX = 0x00;
	//PORTE B0, B1, B6 all == 0
	if(conversion_status == 1) //gyro_120_x
     5ba:	a0 90 10 01 	lds	r10, 0x0110
     5be:	81 e0       	ldi	r24, 0x01	; 1
     5c0:	a8 16       	cp	r10, r24
     5c2:	61 f5       	brne	.+88     	; 0x61c <__vector_29+0x98>
	{
		data.analog_4 =  (data.analog_4 * analog_filter) + ((1 - analog_filter) * (ADCL | (ADCH << 8)));
     5c4:	00 91 78 00 	lds	r16, 0x0078
     5c8:	b0 90 79 00 	lds	r11, 0x0079
     5cc:	60 91 7c 01 	lds	r22, 0x017C
     5d0:	70 91 7d 01 	lds	r23, 0x017D
     5d4:	80 e0       	ldi	r24, 0x00	; 0
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	c3 d6       	rcall	.+3462   	; 0x1360 <__floatunsisf>
     5da:	2a e9       	ldi	r18, 0x9A	; 154
     5dc:	39 e9       	ldi	r19, 0x99	; 153
     5de:	49 e1       	ldi	r20, 0x19	; 25
     5e0:	5f e3       	ldi	r21, 0x3F	; 63
     5e2:	4c d7       	rcall	.+3736   	; 0x147c <__mulsf3>
     5e4:	6b 01       	movw	r12, r22
     5e6:	7c 01       	movw	r14, r24
     5e8:	7b 2d       	mov	r23, r11
     5ea:	60 e0       	ldi	r22, 0x00	; 0
     5ec:	10 e0       	ldi	r17, 0x00	; 0
     5ee:	60 2b       	or	r22, r16
     5f0:	71 2b       	or	r23, r17
     5f2:	88 27       	eor	r24, r24
     5f4:	77 fd       	sbrc	r23, 7
     5f6:	80 95       	com	r24
     5f8:	98 2f       	mov	r25, r24
     5fa:	b4 d6       	rcall	.+3432   	; 0x1364 <__floatsisf>
     5fc:	2c ec       	ldi	r18, 0xCC	; 204
     5fe:	3c ec       	ldi	r19, 0xCC	; 204
     600:	4c ec       	ldi	r20, 0xCC	; 204
     602:	5e e3       	ldi	r21, 0x3E	; 62
     604:	3b d7       	rcall	.+3702   	; 0x147c <__mulsf3>
     606:	9b 01       	movw	r18, r22
     608:	ac 01       	movw	r20, r24
     60a:	c7 01       	movw	r24, r14
     60c:	b6 01       	movw	r22, r12
     60e:	18 d6       	rcall	.+3120   	; 0x1240 <__addsf3>
     610:	7b d6       	rcall	.+3318   	; 0x1308 <__fixunssfsi>
     612:	70 93 7d 01 	sts	0x017D, r23
     616:	60 93 7c 01 	sts	0x017C, r22
     61a:	31 c0       	rjmp	.+98     	; 0x67e <__vector_29+0xfa>
		ADMUX = 0x01; 						
		conversion_status++;
		_delay_us(1);
		ADCSRA |= (1<<ADSC); 				//enable the next conversion
		
	}else if(conversion_status == 2) //gyro_120_y
     61c:	a0 90 10 01 	lds	r10, 0x0110
     620:	82 e0       	ldi	r24, 0x02	; 2
     622:	a8 16       	cp	r10, r24
     624:	09 f0       	breq	.+2      	; 0x628 <__vector_29+0xa4>
     626:	3b c0       	rjmp	.+118    	; 0x69e <__vector_29+0x11a>
	{
		data.analog_5 = (data.analog_5 * analog_filter) + ((1 - analog_filter) * (ADCL | (ADCH << 8)));
     628:	00 91 78 00 	lds	r16, 0x0078
     62c:	b0 90 79 00 	lds	r11, 0x0079
     630:	60 91 7e 01 	lds	r22, 0x017E
     634:	70 91 7f 01 	lds	r23, 0x017F
     638:	80 e0       	ldi	r24, 0x00	; 0
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	91 d6       	rcall	.+3362   	; 0x1360 <__floatunsisf>
     63e:	2a e9       	ldi	r18, 0x9A	; 154
     640:	39 e9       	ldi	r19, 0x99	; 153
     642:	49 e1       	ldi	r20, 0x19	; 25
     644:	5f e3       	ldi	r21, 0x3F	; 63
     646:	1a d7       	rcall	.+3636   	; 0x147c <__mulsf3>
     648:	6b 01       	movw	r12, r22
     64a:	7c 01       	movw	r14, r24
     64c:	7b 2d       	mov	r23, r11
     64e:	60 e0       	ldi	r22, 0x00	; 0
     650:	10 e0       	ldi	r17, 0x00	; 0
     652:	60 2b       	or	r22, r16
     654:	71 2b       	or	r23, r17
     656:	88 27       	eor	r24, r24
     658:	77 fd       	sbrc	r23, 7
     65a:	80 95       	com	r24
     65c:	98 2f       	mov	r25, r24
     65e:	82 d6       	rcall	.+3332   	; 0x1364 <__floatsisf>
     660:	2c ec       	ldi	r18, 0xCC	; 204
     662:	3c ec       	ldi	r19, 0xCC	; 204
     664:	4c ec       	ldi	r20, 0xCC	; 204
     666:	5e e3       	ldi	r21, 0x3E	; 62
     668:	09 d7       	rcall	.+3602   	; 0x147c <__mulsf3>
     66a:	9b 01       	movw	r18, r22
     66c:	ac 01       	movw	r20, r24
     66e:	c7 01       	movw	r24, r14
     670:	b6 01       	movw	r22, r12
     672:	e6 d5       	rcall	.+3020   	; 0x1240 <__addsf3>
     674:	49 d6       	rcall	.+3218   	; 0x1308 <__fixunssfsi>
     676:	70 93 7f 01 	sts	0x017F, r23
     67a:	60 93 7e 01 	sts	0x017E, r22
		ADMUX = 0x02;
     67e:	a0 92 7c 00 	sts	0x007C, r10
		conversion_status++;
     682:	80 91 10 01 	lds	r24, 0x0110
     686:	8f 5f       	subi	r24, 0xFF	; 255
     688:	80 93 10 01 	sts	0x0110, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     68c:	85 e0       	ldi	r24, 0x05	; 5
     68e:	8a 95       	dec	r24
     690:	f1 f7       	brne	.-4      	; 0x68e <__vector_29+0x10a>
		_delay_us(1);
		ADCSRA |= (1<<ADSC); 
     692:	80 91 7a 00 	lds	r24, 0x007A
     696:	80 64       	ori	r24, 0x40	; 64
     698:	80 93 7a 00 	sts	0x007A, r24
     69c:	d9 c1       	rjmp	.+946    	; 0xa50 <__vector_29+0x4cc>
	}else if(conversion_status == 3) //accel_x
     69e:	a0 90 10 01 	lds	r10, 0x0110
     6a2:	83 e0       	ldi	r24, 0x03	; 3
     6a4:	a8 16       	cp	r10, r24
     6a6:	61 f5       	brne	.+88     	; 0x700 <__vector_29+0x17c>
	{
		data.analog_7 = (data.analog_7 * analog_filter) + ((1 - analog_filter) * (ADCL | (ADCH << 8)));
     6a8:	00 91 78 00 	lds	r16, 0x0078
     6ac:	b0 90 79 00 	lds	r11, 0x0079
     6b0:	60 91 82 01 	lds	r22, 0x0182
     6b4:	70 91 83 01 	lds	r23, 0x0183
     6b8:	80 e0       	ldi	r24, 0x00	; 0
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	51 d6       	rcall	.+3234   	; 0x1360 <__floatunsisf>
     6be:	2a e9       	ldi	r18, 0x9A	; 154
     6c0:	39 e9       	ldi	r19, 0x99	; 153
     6c2:	49 e1       	ldi	r20, 0x19	; 25
     6c4:	5f e3       	ldi	r21, 0x3F	; 63
     6c6:	da d6       	rcall	.+3508   	; 0x147c <__mulsf3>
     6c8:	6b 01       	movw	r12, r22
     6ca:	7c 01       	movw	r14, r24
     6cc:	7b 2d       	mov	r23, r11
     6ce:	60 e0       	ldi	r22, 0x00	; 0
     6d0:	10 e0       	ldi	r17, 0x00	; 0
     6d2:	60 2b       	or	r22, r16
     6d4:	71 2b       	or	r23, r17
     6d6:	88 27       	eor	r24, r24
     6d8:	77 fd       	sbrc	r23, 7
     6da:	80 95       	com	r24
     6dc:	98 2f       	mov	r25, r24
     6de:	42 d6       	rcall	.+3204   	; 0x1364 <__floatsisf>
     6e0:	2c ec       	ldi	r18, 0xCC	; 204
     6e2:	3c ec       	ldi	r19, 0xCC	; 204
     6e4:	4c ec       	ldi	r20, 0xCC	; 204
     6e6:	5e e3       	ldi	r21, 0x3E	; 62
     6e8:	c9 d6       	rcall	.+3474   	; 0x147c <__mulsf3>
     6ea:	9b 01       	movw	r18, r22
     6ec:	ac 01       	movw	r20, r24
     6ee:	c7 01       	movw	r24, r14
     6f0:	b6 01       	movw	r22, r12
     6f2:	a6 d5       	rcall	.+2892   	; 0x1240 <__addsf3>
     6f4:	09 d6       	rcall	.+3090   	; 0x1308 <__fixunssfsi>
     6f6:	70 93 83 01 	sts	0x0183, r23
     6fa:	60 93 82 01 	sts	0x0182, r22
     6fe:	bf cf       	rjmp	.-130    	; 0x67e <__vector_29+0xfa>
		ADMUX = 0x03; 						//set to fourth input port
		conversion_status++;
		_delay_us(1);
		ADCSRA |= (1<<ADSC); 				//enable the next conversion
	}else if(conversion_status == 4) //accel_y
     700:	a0 90 10 01 	lds	r10, 0x0110
     704:	84 e0       	ldi	r24, 0x04	; 4
     706:	a8 16       	cp	r10, r24
     708:	61 f5       	brne	.+88     	; 0x762 <__vector_29+0x1de>
	{
		data.analog_8 = (data.analog_8 * analog_filter) + ((1 - analog_filter) * (ADCL | (ADCH << 8)));
     70a:	00 91 78 00 	lds	r16, 0x0078
     70e:	b0 90 79 00 	lds	r11, 0x0079
     712:	60 91 84 01 	lds	r22, 0x0184
     716:	70 91 85 01 	lds	r23, 0x0185
     71a:	80 e0       	ldi	r24, 0x00	; 0
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	20 d6       	rcall	.+3136   	; 0x1360 <__floatunsisf>
     720:	2a e9       	ldi	r18, 0x9A	; 154
     722:	39 e9       	ldi	r19, 0x99	; 153
     724:	49 e1       	ldi	r20, 0x19	; 25
     726:	5f e3       	ldi	r21, 0x3F	; 63
     728:	a9 d6       	rcall	.+3410   	; 0x147c <__mulsf3>
     72a:	6b 01       	movw	r12, r22
     72c:	7c 01       	movw	r14, r24
     72e:	7b 2d       	mov	r23, r11
     730:	60 e0       	ldi	r22, 0x00	; 0
     732:	10 e0       	ldi	r17, 0x00	; 0
     734:	60 2b       	or	r22, r16
     736:	71 2b       	or	r23, r17
     738:	88 27       	eor	r24, r24
     73a:	77 fd       	sbrc	r23, 7
     73c:	80 95       	com	r24
     73e:	98 2f       	mov	r25, r24
     740:	11 d6       	rcall	.+3106   	; 0x1364 <__floatsisf>
     742:	2c ec       	ldi	r18, 0xCC	; 204
     744:	3c ec       	ldi	r19, 0xCC	; 204
     746:	4c ec       	ldi	r20, 0xCC	; 204
     748:	5e e3       	ldi	r21, 0x3E	; 62
     74a:	98 d6       	rcall	.+3376   	; 0x147c <__mulsf3>
     74c:	9b 01       	movw	r18, r22
     74e:	ac 01       	movw	r20, r24
     750:	c7 01       	movw	r24, r14
     752:	b6 01       	movw	r22, r12
     754:	75 d5       	rcall	.+2794   	; 0x1240 <__addsf3>
     756:	d8 d5       	rcall	.+2992   	; 0x1308 <__fixunssfsi>
     758:	70 93 85 01 	sts	0x0185, r23
     75c:	60 93 84 01 	sts	0x0184, r22
     760:	8e cf       	rjmp	.-228    	; 0x67e <__vector_29+0xfa>
		ADMUX = 0x04;
		conversion_status++;
		_delay_us(1);
		ADCSRA |= (1<<ADSC); 				//enable the next conversion
	}else if(conversion_status == 5) //accel_z
     762:	a0 90 10 01 	lds	r10, 0x0110
     766:	85 e0       	ldi	r24, 0x05	; 5
     768:	a8 16       	cp	r10, r24
     76a:	a1 f5       	brne	.+104    	; 0x7d4 <__vector_29+0x250>
	{
		data.analog_9 = (data.analog_9 * analog_filter) + ((1 - analog_filter) * (ADCL | (ADCH << 8)));
     76c:	00 91 78 00 	lds	r16, 0x0078
     770:	b0 90 79 00 	lds	r11, 0x0079
     774:	60 91 86 01 	lds	r22, 0x0186
     778:	70 91 87 01 	lds	r23, 0x0187
     77c:	80 e0       	ldi	r24, 0x00	; 0
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	ef d5       	rcall	.+3038   	; 0x1360 <__floatunsisf>
     782:	2a e9       	ldi	r18, 0x9A	; 154
     784:	39 e9       	ldi	r19, 0x99	; 153
     786:	49 e1       	ldi	r20, 0x19	; 25
     788:	5f e3       	ldi	r21, 0x3F	; 63
     78a:	78 d6       	rcall	.+3312   	; 0x147c <__mulsf3>
     78c:	6b 01       	movw	r12, r22
     78e:	7c 01       	movw	r14, r24
     790:	7b 2d       	mov	r23, r11
     792:	60 e0       	ldi	r22, 0x00	; 0
     794:	10 e0       	ldi	r17, 0x00	; 0
     796:	60 2b       	or	r22, r16
     798:	71 2b       	or	r23, r17
     79a:	88 27       	eor	r24, r24
     79c:	77 fd       	sbrc	r23, 7
     79e:	80 95       	com	r24
     7a0:	98 2f       	mov	r25, r24
     7a2:	e0 d5       	rcall	.+3008   	; 0x1364 <__floatsisf>
     7a4:	2c ec       	ldi	r18, 0xCC	; 204
     7a6:	3c ec       	ldi	r19, 0xCC	; 204
     7a8:	4c ec       	ldi	r20, 0xCC	; 204
     7aa:	5e e3       	ldi	r21, 0x3E	; 62
     7ac:	67 d6       	rcall	.+3278   	; 0x147c <__mulsf3>
     7ae:	9b 01       	movw	r18, r22
     7b0:	ac 01       	movw	r20, r24
     7b2:	c7 01       	movw	r24, r14
     7b4:	b6 01       	movw	r22, r12
     7b6:	44 d5       	rcall	.+2696   	; 0x1240 <__addsf3>
     7b8:	a7 d5       	rcall	.+2894   	; 0x1308 <__fixunssfsi>
     7ba:	70 93 87 01 	sts	0x0187, r23
     7be:	60 93 86 01 	sts	0x0186, r22
		ADMUX = 0x05; 						//set to sixth input port
     7c2:	a0 92 7c 00 	sts	0x007C, r10
		conversion_status++;
     7c6:	80 91 10 01 	lds	r24, 0x0110
     7ca:	8f 5f       	subi	r24, 0xFF	; 255
     7cc:	80 93 10 01 	sts	0x0110, r24
     7d0:	8a 2d       	mov	r24, r10
     7d2:	5d cf       	rjmp	.-326    	; 0x68e <__vector_29+0x10a>
		_delay_us(1);
		ADCSRA |= (1<<ADSC); 				//enable the next conversion
	}else if(conversion_status == 6) //gyro_30_y
     7d4:	a0 90 10 01 	lds	r10, 0x0110
     7d8:	86 e0       	ldi	r24, 0x06	; 6
     7da:	a8 16       	cp	r10, r24
     7dc:	61 f5       	brne	.+88     	; 0x836 <__vector_29+0x2b2>
	{
		data.analog_2 = (data.analog_2 * analog_filter) + ((1 - analog_filter) * (ADCL | (ADCH << 8)));
     7de:	00 91 78 00 	lds	r16, 0x0078
     7e2:	b0 90 79 00 	lds	r11, 0x0079
     7e6:	60 91 78 01 	lds	r22, 0x0178
     7ea:	70 91 79 01 	lds	r23, 0x0179
     7ee:	80 e0       	ldi	r24, 0x00	; 0
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	b6 d5       	rcall	.+2924   	; 0x1360 <__floatunsisf>
     7f4:	2a e9       	ldi	r18, 0x9A	; 154
     7f6:	39 e9       	ldi	r19, 0x99	; 153
     7f8:	49 e1       	ldi	r20, 0x19	; 25
     7fa:	5f e3       	ldi	r21, 0x3F	; 63
     7fc:	3f d6       	rcall	.+3198   	; 0x147c <__mulsf3>
     7fe:	6b 01       	movw	r12, r22
     800:	7c 01       	movw	r14, r24
     802:	7b 2d       	mov	r23, r11
     804:	60 e0       	ldi	r22, 0x00	; 0
     806:	10 e0       	ldi	r17, 0x00	; 0
     808:	60 2b       	or	r22, r16
     80a:	71 2b       	or	r23, r17
     80c:	88 27       	eor	r24, r24
     80e:	77 fd       	sbrc	r23, 7
     810:	80 95       	com	r24
     812:	98 2f       	mov	r25, r24
     814:	a7 d5       	rcall	.+2894   	; 0x1364 <__floatsisf>
     816:	2c ec       	ldi	r18, 0xCC	; 204
     818:	3c ec       	ldi	r19, 0xCC	; 204
     81a:	4c ec       	ldi	r20, 0xCC	; 204
     81c:	5e e3       	ldi	r21, 0x3E	; 62
     81e:	2e d6       	rcall	.+3164   	; 0x147c <__mulsf3>
     820:	9b 01       	movw	r18, r22
     822:	ac 01       	movw	r20, r24
     824:	c7 01       	movw	r24, r14
     826:	b6 01       	movw	r22, r12
     828:	0b d5       	rcall	.+2582   	; 0x1240 <__addsf3>
     82a:	6e d5       	rcall	.+2780   	; 0x1308 <__fixunssfsi>
     82c:	70 93 79 01 	sts	0x0179, r23
     830:	60 93 78 01 	sts	0x0178, r22
     834:	24 cf       	rjmp	.-440    	; 0x67e <__vector_29+0xfa>
		ADMUX = 0x06; 						//set to seventh input port
		conversion_status++;
		_delay_us(1);
		ADCSRA |= (1<<ADSC); 				//enable the next conversion
	}else if(conversion_status == 7) //gyro_30_x
     836:	a0 90 10 01 	lds	r10, 0x0110
     83a:	87 e0       	ldi	r24, 0x07	; 7
     83c:	a8 16       	cp	r10, r24
     83e:	a1 f5       	brne	.+104    	; 0x8a8 <__vector_29+0x324>
	{
		data.analog_1 = (data.analog_1 * analog_filter) + ((1 - analog_filter) * (ADCL | (ADCH << 8)));
     840:	00 91 78 00 	lds	r16, 0x0078
     844:	b0 90 79 00 	lds	r11, 0x0079
     848:	60 91 76 01 	lds	r22, 0x0176
     84c:	70 91 77 01 	lds	r23, 0x0177
     850:	80 e0       	ldi	r24, 0x00	; 0
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	85 d5       	rcall	.+2826   	; 0x1360 <__floatunsisf>
     856:	2a e9       	ldi	r18, 0x9A	; 154
     858:	39 e9       	ldi	r19, 0x99	; 153
     85a:	49 e1       	ldi	r20, 0x19	; 25
     85c:	5f e3       	ldi	r21, 0x3F	; 63
     85e:	0e d6       	rcall	.+3100   	; 0x147c <__mulsf3>
     860:	6b 01       	movw	r12, r22
     862:	7c 01       	movw	r14, r24
     864:	7b 2d       	mov	r23, r11
     866:	60 e0       	ldi	r22, 0x00	; 0
     868:	10 e0       	ldi	r17, 0x00	; 0
     86a:	60 2b       	or	r22, r16
     86c:	71 2b       	or	r23, r17
     86e:	88 27       	eor	r24, r24
     870:	77 fd       	sbrc	r23, 7
     872:	80 95       	com	r24
     874:	98 2f       	mov	r25, r24
     876:	76 d5       	rcall	.+2796   	; 0x1364 <__floatsisf>
     878:	2c ec       	ldi	r18, 0xCC	; 204
     87a:	3c ec       	ldi	r19, 0xCC	; 204
     87c:	4c ec       	ldi	r20, 0xCC	; 204
     87e:	5e e3       	ldi	r21, 0x3E	; 62
     880:	fd d5       	rcall	.+3066   	; 0x147c <__mulsf3>
     882:	9b 01       	movw	r18, r22
     884:	ac 01       	movw	r20, r24
     886:	c7 01       	movw	r24, r14
     888:	b6 01       	movw	r22, r12
     88a:	da d4       	rcall	.+2484   	; 0x1240 <__addsf3>
     88c:	3d d5       	rcall	.+2682   	; 0x1308 <__fixunssfsi>
     88e:	70 93 77 01 	sts	0x0177, r23
     892:	60 93 76 01 	sts	0x0176, r22
		ADMUX = 0x07; 						//set to eighth input port
     896:	a0 92 7c 00 	sts	0x007C, r10
		conversion_status++;
     89a:	80 91 10 01 	lds	r24, 0x0110
     89e:	8f 5f       	subi	r24, 0xFF	; 255
     8a0:	80 93 10 01 	sts	0x0110, r24
     8a4:	8a e0       	ldi	r24, 0x0A	; 10
     8a6:	f3 ce       	rjmp	.-538    	; 0x68e <__vector_29+0x10a>
		_delay_us(2);
		ADCSRA |= (1<<ADSC);				//enable the next conversion
	}else if(conversion_status == 8)
     8a8:	80 91 10 01 	lds	r24, 0x0110
     8ac:	88 30       	cpi	r24, 0x08	; 8
     8ae:	09 f0       	breq	.+2      	; 0x8b2 <__vector_29+0x32e>
     8b0:	cf c0       	rjmp	.+414    	; 0xa50 <__vector_29+0x4cc>
	{
		if(thumb_count == 0)
     8b2:	80 91 11 01 	lds	r24, 0x0111
     8b6:	88 23       	and	r24, r24
     8b8:	69 f5       	brne	.+90     	; 0x914 <__vector_29+0x390>
		{
			data.analog_16 = (data.analog_16 * analog_filter) + ((1 - analog_filter) * (ADCL | (ADCH << 8)));
     8ba:	00 91 78 00 	lds	r16, 0x0078
     8be:	b0 90 79 00 	lds	r11, 0x0079
     8c2:	60 91 94 01 	lds	r22, 0x0194
     8c6:	70 91 95 01 	lds	r23, 0x0195
     8ca:	80 e0       	ldi	r24, 0x00	; 0
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	48 d5       	rcall	.+2704   	; 0x1360 <__floatunsisf>
     8d0:	2a e9       	ldi	r18, 0x9A	; 154
     8d2:	39 e9       	ldi	r19, 0x99	; 153
     8d4:	49 e1       	ldi	r20, 0x19	; 25
     8d6:	5f e3       	ldi	r21, 0x3F	; 63
     8d8:	d1 d5       	rcall	.+2978   	; 0x147c <__mulsf3>
     8da:	6b 01       	movw	r12, r22
     8dc:	7c 01       	movw	r14, r24
     8de:	7b 2d       	mov	r23, r11
     8e0:	60 e0       	ldi	r22, 0x00	; 0
     8e2:	10 e0       	ldi	r17, 0x00	; 0
     8e4:	60 2b       	or	r22, r16
     8e6:	71 2b       	or	r23, r17
     8e8:	88 27       	eor	r24, r24
     8ea:	77 fd       	sbrc	r23, 7
     8ec:	80 95       	com	r24
     8ee:	98 2f       	mov	r25, r24
     8f0:	39 d5       	rcall	.+2674   	; 0x1364 <__floatsisf>
     8f2:	2c ec       	ldi	r18, 0xCC	; 204
     8f4:	3c ec       	ldi	r19, 0xCC	; 204
     8f6:	4c ec       	ldi	r20, 0xCC	; 204
     8f8:	5e e3       	ldi	r21, 0x3E	; 62
     8fa:	c0 d5       	rcall	.+2944   	; 0x147c <__mulsf3>
     8fc:	9b 01       	movw	r18, r22
     8fe:	ac 01       	movw	r20, r24
     900:	c7 01       	movw	r24, r14
     902:	b6 01       	movw	r22, r12
     904:	9d d4       	rcall	.+2362   	; 0x1240 <__addsf3>
     906:	00 d5       	rcall	.+2560   	; 0x1308 <__fixunssfsi>
     908:	70 93 95 01 	sts	0x0195, r23
     90c:	60 93 94 01 	sts	0x0194, r22
			//PORTE |= (1 << 0); //set 101
			PORTE = 0b00000001;
     910:	81 e0       	ldi	r24, 0x01	; 1
     912:	30 c0       	rjmp	.+96     	; 0x974 <__vector_29+0x3f0>
			thumb_count++;
		}
		else if(thumb_count == 1)
     914:	80 91 11 01 	lds	r24, 0x0111
     918:	81 30       	cpi	r24, 0x01	; 1
     91a:	99 f5       	brne	.+102    	; 0x982 <__vector_29+0x3fe>
		{
			data.analog_15 = (data.analog_15 * analog_filter) + ((1 - analog_filter) * (ADCL | (ADCH << 8)));
     91c:	00 91 78 00 	lds	r16, 0x0078
     920:	b0 90 79 00 	lds	r11, 0x0079
     924:	60 91 92 01 	lds	r22, 0x0192
     928:	70 91 93 01 	lds	r23, 0x0193
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	17 d5       	rcall	.+2606   	; 0x1360 <__floatunsisf>
     932:	2a e9       	ldi	r18, 0x9A	; 154
     934:	39 e9       	ldi	r19, 0x99	; 153
     936:	49 e1       	ldi	r20, 0x19	; 25
     938:	5f e3       	ldi	r21, 0x3F	; 63
     93a:	a0 d5       	rcall	.+2880   	; 0x147c <__mulsf3>
     93c:	6b 01       	movw	r12, r22
     93e:	7c 01       	movw	r14, r24
     940:	7b 2d       	mov	r23, r11
     942:	60 e0       	ldi	r22, 0x00	; 0
     944:	10 e0       	ldi	r17, 0x00	; 0
     946:	60 2b       	or	r22, r16
     948:	71 2b       	or	r23, r17
     94a:	88 27       	eor	r24, r24
     94c:	77 fd       	sbrc	r23, 7
     94e:	80 95       	com	r24
     950:	98 2f       	mov	r25, r24
     952:	08 d5       	rcall	.+2576   	; 0x1364 <__floatsisf>
     954:	2c ec       	ldi	r18, 0xCC	; 204
     956:	3c ec       	ldi	r19, 0xCC	; 204
     958:	4c ec       	ldi	r20, 0xCC	; 204
     95a:	5e e3       	ldi	r21, 0x3E	; 62
     95c:	8f d5       	rcall	.+2846   	; 0x147c <__mulsf3>
     95e:	9b 01       	movw	r18, r22
     960:	ac 01       	movw	r20, r24
     962:	c7 01       	movw	r24, r14
     964:	b6 01       	movw	r22, r12
     966:	6c d4       	rcall	.+2264   	; 0x1240 <__addsf3>
     968:	cf d4       	rcall	.+2462   	; 0x1308 <__fixunssfsi>
     96a:	70 93 93 01 	sts	0x0193, r23
     96e:	60 93 92 01 	sts	0x0192, r22
			//PORTE &= ~(1 << 0);
			//PORTE |= (1 << 1); //set 110
			PORTE = 0b00100010;
     972:	82 e2       	ldi	r24, 0x22	; 34
     974:	8e b9       	out	0x0e, r24	; 14
			thumb_count++;
     976:	80 91 11 01 	lds	r24, 0x0111
     97a:	8f 5f       	subi	r24, 0xFF	; 255
     97c:	80 93 11 01 	sts	0x0111, r24
     980:	63 c0       	rjmp	.+198    	; 0xa48 <__vector_29+0x4c4>
		}
		else if(thumb_count == 2)
     982:	80 91 11 01 	lds	r24, 0x0111
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	69 f5       	brne	.+90     	; 0x9e4 <__vector_29+0x460>
		{
			data.analog_13 = (data.analog_13 * analog_filter) + ((1 - analog_filter) * (ADCL | (ADCH << 8)));
     98a:	00 91 78 00 	lds	r16, 0x0078
     98e:	b0 90 79 00 	lds	r11, 0x0079
     992:	60 91 8e 01 	lds	r22, 0x018E
     996:	70 91 8f 01 	lds	r23, 0x018F
     99a:	80 e0       	ldi	r24, 0x00	; 0
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	e0 d4       	rcall	.+2496   	; 0x1360 <__floatunsisf>
     9a0:	2a e9       	ldi	r18, 0x9A	; 154
     9a2:	39 e9       	ldi	r19, 0x99	; 153
     9a4:	49 e1       	ldi	r20, 0x19	; 25
     9a6:	5f e3       	ldi	r21, 0x3F	; 63
     9a8:	69 d5       	rcall	.+2770   	; 0x147c <__mulsf3>
     9aa:	6b 01       	movw	r12, r22
     9ac:	7c 01       	movw	r14, r24
     9ae:	7b 2d       	mov	r23, r11
     9b0:	60 e0       	ldi	r22, 0x00	; 0
     9b2:	10 e0       	ldi	r17, 0x00	; 0
     9b4:	60 2b       	or	r22, r16
     9b6:	71 2b       	or	r23, r17
     9b8:	88 27       	eor	r24, r24
     9ba:	77 fd       	sbrc	r23, 7
     9bc:	80 95       	com	r24
     9be:	98 2f       	mov	r25, r24
     9c0:	d1 d4       	rcall	.+2466   	; 0x1364 <__floatsisf>
     9c2:	2c ec       	ldi	r18, 0xCC	; 204
     9c4:	3c ec       	ldi	r19, 0xCC	; 204
     9c6:	4c ec       	ldi	r20, 0xCC	; 204
     9c8:	5e e3       	ldi	r21, 0x3E	; 62
     9ca:	58 d5       	rcall	.+2736   	; 0x147c <__mulsf3>
     9cc:	9b 01       	movw	r18, r22
     9ce:	ac 01       	movw	r20, r24
     9d0:	c7 01       	movw	r24, r14
     9d2:	b6 01       	movw	r22, r12
     9d4:	35 d4       	rcall	.+2154   	; 0x1240 <__addsf3>
     9d6:	98 d4       	rcall	.+2352   	; 0x1308 <__fixunssfsi>
     9d8:	70 93 8f 01 	sts	0x018F, r23
     9dc:	60 93 8e 01 	sts	0x018E, r22
			//PORTE |= (1 << 0); //set 111
			PORTE = 0b00100011;
     9e0:	83 e2       	ldi	r24, 0x23	; 35
     9e2:	c8 cf       	rjmp	.-112    	; 0x974 <__vector_29+0x3f0>
			thumb_count++;
		}
		else if(thumb_count == 3)
     9e4:	80 91 11 01 	lds	r24, 0x0111
     9e8:	83 30       	cpi	r24, 0x03	; 3
     9ea:	71 f5       	brne	.+92     	; 0xa48 <__vector_29+0x4c4>
		{
			data.analog_14 = (data.analog_14 * analog_filter) + ((1 - analog_filter) * (ADCL | (ADCH << 8)));
     9ec:	00 91 78 00 	lds	r16, 0x0078
     9f0:	b0 90 79 00 	lds	r11, 0x0079
     9f4:	60 91 90 01 	lds	r22, 0x0190
     9f8:	70 91 91 01 	lds	r23, 0x0191
     9fc:	80 e0       	ldi	r24, 0x00	; 0
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	af d4       	rcall	.+2398   	; 0x1360 <__floatunsisf>
     a02:	2a e9       	ldi	r18, 0x9A	; 154
     a04:	39 e9       	ldi	r19, 0x99	; 153
     a06:	49 e1       	ldi	r20, 0x19	; 25
     a08:	5f e3       	ldi	r21, 0x3F	; 63
     a0a:	38 d5       	rcall	.+2672   	; 0x147c <__mulsf3>
     a0c:	6b 01       	movw	r12, r22
     a0e:	7c 01       	movw	r14, r24
     a10:	7b 2d       	mov	r23, r11
     a12:	60 e0       	ldi	r22, 0x00	; 0
     a14:	10 e0       	ldi	r17, 0x00	; 0
     a16:	60 2b       	or	r22, r16
     a18:	71 2b       	or	r23, r17
     a1a:	88 27       	eor	r24, r24
     a1c:	77 fd       	sbrc	r23, 7
     a1e:	80 95       	com	r24
     a20:	98 2f       	mov	r25, r24
     a22:	a0 d4       	rcall	.+2368   	; 0x1364 <__floatsisf>
     a24:	2c ec       	ldi	r18, 0xCC	; 204
     a26:	3c ec       	ldi	r19, 0xCC	; 204
     a28:	4c ec       	ldi	r20, 0xCC	; 204
     a2a:	5e e3       	ldi	r21, 0x3E	; 62
     a2c:	27 d5       	rcall	.+2638   	; 0x147c <__mulsf3>
     a2e:	9b 01       	movw	r18, r22
     a30:	ac 01       	movw	r20, r24
     a32:	c7 01       	movw	r24, r14
     a34:	b6 01       	movw	r22, r12
     a36:	04 d4       	rcall	.+2056   	; 0x1240 <__addsf3>
     a38:	67 d4       	rcall	.+2254   	; 0x1308 <__fixunssfsi>
     a3a:	70 93 91 01 	sts	0x0191, r23
     a3e:	60 93 90 01 	sts	0x0190, r22
			//PORTE &= ~(1 << 1) & ~(1 << 0); //set 100
			PORTE = 0b00000000;
     a42:	1e b8       	out	0x0e, r1	; 14
			thumb_count = 0;
     a44:	10 92 11 01 	sts	0x0111, r1
		}
		ADMUX = 0x00;
     a48:	10 92 7c 00 	sts	0x007C, r1
		conversion_status = 0;
     a4c:	10 92 10 01 	sts	0x0110, r1
	}
}
     a50:	ff 91       	pop	r31
     a52:	ef 91       	pop	r30
     a54:	bf 91       	pop	r27
     a56:	af 91       	pop	r26
     a58:	9f 91       	pop	r25
     a5a:	8f 91       	pop	r24
     a5c:	7f 91       	pop	r23
     a5e:	6f 91       	pop	r22
     a60:	5f 91       	pop	r21
     a62:	4f 91       	pop	r20
     a64:	3f 91       	pop	r19
     a66:	2f 91       	pop	r18
     a68:	1f 91       	pop	r17
     a6a:	0f 91       	pop	r16
     a6c:	ff 90       	pop	r15
     a6e:	ef 90       	pop	r14
     a70:	df 90       	pop	r13
     a72:	cf 90       	pop	r12
     a74:	bf 90       	pop	r11
     a76:	af 90       	pop	r10
     a78:	0f 90       	pop	r0
     a7a:	0b be       	out	0x3b, r0	; 59
     a7c:	0f 90       	pop	r0
     a7e:	0f be       	out	0x3f, r0	; 63
     a80:	0f 90       	pop	r0
     a82:	1f 90       	pop	r1
     a84:	18 95       	reti

00000a86 <setupHardware>:

/** Configures the board hardware and chip peripherals */
void setupHardware(void)
{
	// set for 16 MHz clock, and turn on the LED
	CPU_PRESCALE(0);
     a86:	80 e8       	ldi	r24, 0x80	; 128
     a88:	80 93 61 00 	sts	0x0061, r24
     a8c:	10 92 61 00 	sts	0x0061, r1

	//This is set up for a Teensy 2.0++ (AT90USB1286) running at 16MHz
	//if using a different board these may need to be changed
	
	DDRD = 0x00; 		//configure port D as inputs with pullup resistors
     a90:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0xFF;
     a92:	9f ef       	ldi	r25, 0xFF	; 255
     a94:	9b b9       	out	0x0b, r25	; 11
	DDRC = 0x00; 		//configure port C as inputs with pullup resistors
     a96:	17 b8       	out	0x07, r1	; 7
	PORTC = 0xFF;
     a98:	98 b9       	out	0x08, r25	; 8
	DDRB = 0x00; 		//configure port B as inputs with pullup resistors
     a9a:	14 b8       	out	0x04, r1	; 4
	PORTB = 0xFF;
     a9c:	95 b9       	out	0x05, r25	; 5
	DDRA = 0x00; 		//configure port A as inputs with pullup resistors
     a9e:	11 b8       	out	0x01, r1	; 1
	PORTA = 0xFF;
     aa0:	92 b9       	out	0x02, r25	; 2
	DDRE = 0x23; 	//set bit 0, 1, 6 as outputs
     aa2:	83 e2       	ldi	r24, 0x23	; 35
     aa4:	8d b9       	out	0x0d, r24	; 13
	PORTE = 0x20; 	//set bit 6 to high
     aa6:	80 e2       	ldi	r24, 0x20	; 32
     aa8:	8e b9       	out	0x0e, r24	; 14
	
	//setup the ADC
	ADMUX = 0x00; //set to external Vref, channel 0
     aaa:	10 92 7c 00 	sts	0x007C, r1
	//ADMUX bits 0, 1, 2 set the ADC channel
	//ADEN - enable ADC, ADSC - start conversion
	//enables the ADC and the interrupt, set the division factor to 128
	ADCSRA = (1 << ADEN) | (1 << ADIE) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
     aae:	8f e8       	ldi	r24, 0x8F	; 143
     ab0:	80 93 7a 00 	sts	0x007A, r24
	DIDR0 = 0xFF;  		// all analog pins (F0-F7) have digital input disabled
     ab4:	90 93 7e 00 	sts	0x007E, r25
	
	/* Hardware Initialization */
	usb_init();
     ab8:	7e d0       	rcall	.+252    	; 0xbb6 <usb_init>
	while (!usb_configured()) /* wait */ ;
     aba:	96 d0       	rcall	.+300    	; 0xbe8 <usb_configured>
     abc:	88 23       	and	r24, r24
     abe:	e9 f3       	breq	.-6      	; 0xaba <setupHardware+0x34>
     ac0:	80 e1       	ldi	r24, 0x10	; 16
     ac2:	97 e2       	ldi	r25, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ac4:	20 e9       	ldi	r18, 0x90	; 144
     ac6:	31 e0       	ldi	r19, 0x01	; 1
     ac8:	f9 01       	movw	r30, r18
     aca:	31 97       	sbiw	r30, 0x01	; 1
     acc:	f1 f7       	brne	.-4      	; 0xaca <setupHardware+0x44>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ace:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ad0:	d9 f7       	brne	.-10     	; 0xac8 <setupHardware+0x42>
	_delay_ms(1000);
}
     ad2:	08 95       	ret

00000ad4 <main>:

uint8_t buffer[PACKET_SIZE];

// Basic command interpreter for controlling port pins
int main(void)
{
     ad4:	bf 92       	push	r11
     ad6:	cf 92       	push	r12
     ad8:	df 92       	push	r13
     ada:	ef 92       	push	r14
     adc:	ff 92       	push	r15
     ade:	0f 93       	push	r16
     ae0:	1f 93       	push	r17
     ae2:	cf 93       	push	r28
     ae4:	df 93       	push	r29
	setupHardware();
     ae6:	cf df       	rcall	.-98     	; 0xa86 <setupHardware>
	sei();
     ae8:	78 94       	sei
	//initStruct();

	//set the next ADC conversion
	ADCSRA |= (1<<ADSC);
     aea:	80 91 7a 00 	lds	r24, 0x007A
     aee:	80 64       	ori	r24, 0x40	; 64
     af0:	80 93 7a 00 	sts	0x007A, r24
	conversion_status = 1;
     af4:	81 e0       	ldi	r24, 0x01	; 1
     af6:	80 93 10 01 	sts	0x0110, r24
	
	while (1) {
		// wait for the user to run their terminal emulator program
		// which sets DTR to indicate it is ready to receive.
		while (!(usb_serial_get_control() & USB_SERIAL_DTR)) /* wait */ ;
     afa:	f4 d1       	rcall	.+1000   	; 0xee4 <usb_serial_get_control>
     afc:	80 ff       	sbrs	r24, 0
     afe:	fd cf       	rjmp	.-6      	; 0xafa <main+0x26>

		// discard anything that was received prior.  Sometimes the
		// operating system or other software will send a modem
		// "AT command", which can still be buffered.
		usb_serial_flush_input();
     b00:	b6 d0       	rcall	.+364    	; 0xc6e <usb_serial_flush_input>
					//Transmit data
					packData();
					usb_serial_write(buffer, sizeof(buffer));
					//set the next ADC conversion
					ADCSRA |= (1<<ADSC);
					conversion_status = 1;
     b02:	bb 24       	eor	r11, r11
     b04:	b3 94       	inc	r11
		// operating system or other software will send a modem
		// "AT command", which can still be buffered.
		usb_serial_flush_input();
		
		while (1) {
			read_buttons();
     b06:	75 dc       	rcall	.-1814   	; 0x3f2 <read_buttons>
		
			if(conversion_status == 0 && usb_serial_available() >= 1)
     b08:	80 91 10 01 	lds	r24, 0x0110
     b0c:	88 23       	and	r24, r24
     b0e:	09 f0       	breq	.+2      	; 0xb12 <main+0x3e>
     b10:	45 c0       	rjmp	.+138    	; 0xb9c <main+0xc8>
     b12:	92 d0       	rcall	.+292    	; 0xc38 <usb_serial_available>
     b14:	88 23       	and	r24, r24
     b16:	09 f4       	brne	.+2      	; 0xb1a <main+0x46>
     b18:	41 c0       	rjmp	.+130    	; 0xb9c <main+0xc8>
			{
				if(usb_serial_getchar() == CONTROL_START){
     b1a:	69 d0       	rcall	.+210    	; 0xbee <usb_serial_getchar>
     b1c:	05 97       	sbiw	r24, 0x05	; 5
     b1e:	99 f7       	brne	.-26     	; 0xb06 <main+0x32>
					//usb_serial_flush_input();
					//Set unused bits in used ports
					digital_c |= (1<<7);
     b20:	40 91 02 01 	lds	r20, 0x0102
     b24:	40 68       	ori	r20, 0x80	; 128
     b26:	40 93 02 01 	sts	0x0102, r20
					digital_d |= (1<<6) | (1<<7);
     b2a:	20 91 03 01 	lds	r18, 0x0103
     b2e:	20 6c       	ori	r18, 0xC0	; 192
     b30:	20 93 03 01 	sts	0x0103, r18
					data.digital_1 = (digital_a << 8) | digital_b;
     b34:	d0 90 00 01 	lds	r13, 0x0100
     b38:	cc 24       	eor	r12, r12
     b3a:	80 91 01 01 	lds	r24, 0x0101
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	8c 29       	or	r24, r12
     b42:	9d 29       	or	r25, r13
     b44:	90 93 97 01 	sts	0x0197, r25
     b48:	80 93 96 01 	sts	0x0196, r24
					data.digital_2 = (digital_c << 8) | digital_d;
     b4c:	f4 2e       	mov	r15, r20
     b4e:	ee 24       	eor	r14, r14
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	2e 29       	or	r18, r14
     b54:	3f 29       	or	r19, r15
     b56:	30 93 99 01 	sts	0x0199, r19
     b5a:	20 93 98 01 	sts	0x0198, r18
					data.digital_3 = (digital_e << 8) | digital_f;
     b5e:	10 91 04 01 	lds	r17, 0x0104
     b62:	00 e0       	ldi	r16, 0x00	; 0
     b64:	80 91 05 01 	lds	r24, 0x0105
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	80 2b       	or	r24, r16
     b6c:	91 2b       	or	r25, r17
     b6e:	90 93 9b 01 	sts	0x019B, r25
     b72:	80 93 9a 01 	sts	0x019A, r24
					data.digital_4 = (digital_g << 8) | digital_h;
     b76:	d0 91 06 01 	lds	r29, 0x0106
     b7a:	c0 e0       	ldi	r28, 0x00	; 0
     b7c:	80 91 07 01 	lds	r24, 0x0107
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	8c 2b       	or	r24, r28
     b84:	9d 2b       	or	r25, r29
     b86:	90 93 9d 01 	sts	0x019D, r25
     b8a:	80 93 9c 01 	sts	0x019C, r24
					//Transmit data
					packData();
     b8e:	57 db       	rcall	.-2386   	; 0x23e <packData>
					usb_serial_write(buffer, sizeof(buffer));
     b90:	86 e3       	ldi	r24, 0x36	; 54
     b92:	91 e0       	ldi	r25, 0x01	; 1
     b94:	60 e4       	ldi	r22, 0x40	; 64
     b96:	70 e0       	ldi	r23, 0x00	; 0
     b98:	7d d0       	rcall	.+250    	; 0xc94 <usb_serial_write>
     b9a:	05 c0       	rjmp	.+10     	; 0xba6 <main+0xd2>
					ADCSRA |= (1<<ADSC);
					conversion_status = 1;
				}
			}
			//If the PC isn't ready for the data go ahead and do another analog sample
			else if (conversion_status == 0){
     b9c:	80 91 10 01 	lds	r24, 0x0110
     ba0:	88 23       	and	r24, r24
     ba2:	09 f0       	breq	.+2      	; 0xba6 <main+0xd2>
     ba4:	b0 cf       	rjmp	.-160    	; 0xb06 <main+0x32>
				//set the next ADC conversion
				ADCSRA |= (1<<ADSC);
     ba6:	80 91 7a 00 	lds	r24, 0x007A
     baa:	80 64       	ori	r24, 0x40	; 64
     bac:	80 93 7a 00 	sts	0x007A, r24
				conversion_status = 1;
     bb0:	b0 92 10 01 	sts	0x0110, r11
     bb4:	a8 cf       	rjmp	.-176    	; 0xb06 <main+0x32>

00000bb6 <usb_init>:
 **************************************************************************/

// initialize USB serial
void usb_init(void)
{
	HW_CONFIG();
     bb6:	81 e8       	ldi	r24, 0x81	; 129
     bb8:	80 93 d7 00 	sts	0x00D7, r24
        USB_FREEZE();				// enable USB
     bbc:	80 ea       	ldi	r24, 0xA0	; 160
     bbe:	80 93 d8 00 	sts	0x00D8, r24
        PLL_CONFIG();				// config PLL, 16 MHz xtal
     bc2:	86 e1       	ldi	r24, 0x16	; 22
     bc4:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
     bc6:	09 b4       	in	r0, 0x29	; 41
     bc8:	00 fe       	sbrs	r0, 0
     bca:	fd cf       	rjmp	.-6      	; 0xbc6 <usb_init+0x10>
        USB_CONFIG();				// start USB clock
     bcc:	80 e9       	ldi	r24, 0x90	; 144
     bce:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
     bd2:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
     bd6:	10 92 32 01 	sts	0x0132, r1
	cdc_line_rtsdtr = 0;
     bda:	10 92 33 01 	sts	0x0133, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
     bde:	8c e0       	ldi	r24, 0x0C	; 12
     be0:	80 93 e2 00 	sts	0x00E2, r24
	sei();
     be4:	78 94       	sei
}
     be6:	08 95       	ret

00000be8 <usb_configured>:

// return 0 if the USB is not configured, or the configuration
// number selected by the HOST
uint8_t usb_configured(void)
{
	return usb_configuration;
     be8:	80 91 32 01 	lds	r24, 0x0132
}
     bec:	08 95       	ret

00000bee <usb_serial_getchar>:
	uint8_t c, intr_state;

	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
     bee:	2f b7       	in	r18, 0x3f	; 63
	cli();
     bf0:	f8 94       	cli
	if (!usb_configuration) {
     bf2:	80 91 32 01 	lds	r24, 0x0132
     bf6:	88 23       	and	r24, r24
     bf8:	69 f0       	breq	.+26     	; 0xc14 <usb_serial_getchar+0x26>
		SREG = intr_state;
		return -1;
	}
	UENUM = CDC_RX_ENDPOINT;
     bfa:	83 e0       	ldi	r24, 0x03	; 3
     bfc:	80 93 e9 00 	sts	0x00E9, r24
	retry:
	c = UEINTX;
	if (!(c & (1<<RWAL))) {
		// no data in buffer
		if (c & (1<<RXOUTI)) {
			UEINTX = 0x6B;
     c00:	9b e6       	ldi	r25, 0x6B	; 107
		SREG = intr_state;
		return -1;
	}
	UENUM = CDC_RX_ENDPOINT;
	retry:
	c = UEINTX;
     c02:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(c & (1<<RWAL))) {
     c06:	85 fd       	sbrc	r24, 5
     c08:	09 c0       	rjmp	.+18     	; 0xc1c <usb_serial_getchar+0x2e>
		// no data in buffer
		if (c & (1<<RXOUTI)) {
     c0a:	82 ff       	sbrs	r24, 2
     c0c:	03 c0       	rjmp	.+6      	; 0xc14 <usb_serial_getchar+0x26>
			UEINTX = 0x6B;
     c0e:	90 93 e8 00 	sts	0x00E8, r25
     c12:	f7 cf       	rjmp	.-18     	; 0xc02 <usb_serial_getchar+0x14>
			goto retry;
		}	
		SREG = intr_state;
     c14:	2f bf       	out	0x3f, r18	; 63
     c16:	2f ef       	ldi	r18, 0xFF	; 255
     c18:	3f ef       	ldi	r19, 0xFF	; 255
     c1a:	0c c0       	rjmp	.+24     	; 0xc34 <usb_serial_getchar+0x46>
		return -1;
	}
	// take one byte out of the buffer
	c = UEDATX;
     c1c:	90 91 f1 00 	lds	r25, 0x00F1
	// if buffer completely used, release it
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x6B;
     c20:	80 91 e8 00 	lds	r24, 0x00E8
     c24:	85 fd       	sbrc	r24, 5
     c26:	03 c0       	rjmp	.+6      	; 0xc2e <usb_serial_getchar+0x40>
     c28:	8b e6       	ldi	r24, 0x6B	; 107
     c2a:	80 93 e8 00 	sts	0x00E8, r24
	SREG = intr_state;
     c2e:	2f bf       	out	0x3f, r18	; 63
	return c;
     c30:	29 2f       	mov	r18, r25
     c32:	30 e0       	ldi	r19, 0x00	; 0
}
     c34:	c9 01       	movw	r24, r18
     c36:	08 95       	ret

00000c38 <usb_serial_available>:
// number of bytes available in the receive buffer
uint8_t usb_serial_available(void)
{
	uint8_t n=0, i, intr_state;

	intr_state = SREG;
     c38:	2f b7       	in	r18, 0x3f	; 63
	cli();
     c3a:	f8 94       	cli
	if (usb_configuration) {
     c3c:	80 91 32 01 	lds	r24, 0x0132
     c40:	88 23       	and	r24, r24
     c42:	11 f4       	brne	.+4      	; 0xc48 <usb_serial_available+0x10>
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	10 c0       	rjmp	.+32     	; 0xc68 <usb_serial_available+0x30>
		UENUM = CDC_RX_ENDPOINT;
     c48:	83 e0       	ldi	r24, 0x03	; 3
     c4a:	80 93 e9 00 	sts	0x00E9, r24
		n = UEBCLX;
     c4e:	90 91 f2 00 	lds	r25, 0x00F2
		if (!n) {
     c52:	99 23       	and	r25, r25
     c54:	49 f4       	brne	.+18     	; 0xc68 <usb_serial_available+0x30>
			i = UEINTX;
     c56:	80 91 e8 00 	lds	r24, 0x00E8
			if (i & (1<<RXOUTI) && !(i & (1<<RWAL))) UEINTX = 0x6B;
     c5a:	82 ff       	sbrs	r24, 2
     c5c:	05 c0       	rjmp	.+10     	; 0xc68 <usb_serial_available+0x30>
     c5e:	85 fd       	sbrc	r24, 5
     c60:	03 c0       	rjmp	.+6      	; 0xc68 <usb_serial_available+0x30>
     c62:	8b e6       	ldi	r24, 0x6B	; 107
     c64:	80 93 e8 00 	sts	0x00E8, r24
		}
	}
	SREG = intr_state;
     c68:	2f bf       	out	0x3f, r18	; 63
	return n;
}
     c6a:	89 2f       	mov	r24, r25
     c6c:	08 95       	ret

00000c6e <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	uint8_t intr_state;

	if (usb_configuration) {
     c6e:	80 91 32 01 	lds	r24, 0x0132
     c72:	88 23       	and	r24, r24
     c74:	71 f0       	breq	.+28     	; 0xc92 <usb_serial_flush_input+0x24>
		intr_state = SREG;
     c76:	9f b7       	in	r25, 0x3f	; 63
		cli();
     c78:	f8 94       	cli
		UENUM = CDC_RX_ENDPOINT;
     c7a:	83 e0       	ldi	r24, 0x03	; 3
     c7c:	80 93 e9 00 	sts	0x00E9, r24
		while ((UEINTX & (1<<RWAL))) {
			UEINTX = 0x6B; 
     c80:	2b e6       	ldi	r18, 0x6B	; 107
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <usb_serial_flush_input+0x1a>
     c84:	20 93 e8 00 	sts	0x00E8, r18

	if (usb_configuration) {
		intr_state = SREG;
		cli();
		UENUM = CDC_RX_ENDPOINT;
		while ((UEINTX & (1<<RWAL))) {
     c88:	80 91 e8 00 	lds	r24, 0x00E8
     c8c:	85 fd       	sbrc	r24, 5
     c8e:	fa cf       	rjmp	.-12     	; 0xc84 <usb_serial_flush_input+0x16>
			UEINTX = 0x6B; 
		}
		SREG = intr_state;
     c90:	9f bf       	out	0x3f, r25	; 63
     c92:	08 95       	ret

00000c94 <usb_serial_write>:
// can also be limited by how quickly the PC-based software reads data, as the host
// controller in the PC will not allocate bandwitdh without a pending read request.
// (thanks to Victor Suarez for testing and feedback and initial code)

int8_t usb_serial_write(const uint8_t *buffer, uint16_t size)
{
     c94:	cf 93       	push	r28
     c96:	df 93       	push	r29
     c98:	ec 01       	movw	r28, r24
	uint8_t timeout, intr_state, write_size;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
     c9a:	80 91 32 01 	lds	r24, 0x0132
     c9e:	88 23       	and	r24, r24
     ca0:	09 f4       	brne	.+2      	; 0xca4 <usb_serial_write+0x10>
     ca2:	1c c1       	rjmp	.+568    	; 0xedc <usb_serial_write+0x248>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
     ca4:	3f b7       	in	r19, 0x3f	; 63
	cli();
     ca6:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
     ca8:	84 e0       	ldi	r24, 0x04	; 4
     caa:	80 93 e9 00 	sts	0x00E9, r24
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
     cae:	80 91 35 01 	lds	r24, 0x0135
     cb2:	88 23       	and	r24, r24
     cb4:	09 f4       	brne	.+2      	; 0xcb8 <usb_serial_write+0x24>
     cb6:	08 c1       	rjmp	.+528    	; 0xec8 <usb_serial_write+0x234>
		if (!(UEINTX & (1<<RWAL))) {
     cb8:	80 91 e8 00 	lds	r24, 0x00E8
     cbc:	85 fd       	sbrc	r24, 5
     cbe:	02 c0       	rjmp	.+4      	; 0xcc4 <usb_serial_write+0x30>
			SREG = intr_state;
     cc0:	3f bf       	out	0x3f, r19	; 63
     cc2:	0c c1       	rjmp	.+536    	; 0xedc <usb_serial_write+0x248>
			return -1;
		}
		transmit_previous_timeout = 0;
     cc4:	10 92 35 01 	sts	0x0135, r1
     cc8:	ff c0       	rjmp	.+510    	; 0xec8 <usb_serial_write+0x234>
	}
	// each iteration of this loop transmits a packet
	while (size) {
		// wait for the FIFO to be ready to accept data
		timeout = UDFNUML + TRANSMIT_TIMEOUT;
     cca:	90 91 e4 00 	lds	r25, 0x00E4
     cce:	97 5e       	subi	r25, 0xE7	; 231
		while (1) {
			// are we ready to transmit?
			if (UEINTX & (1<<RWAL)) break;
     cd0:	80 91 e8 00 	lds	r24, 0x00E8
     cd4:	85 fd       	sbrc	r24, 5
     cd6:	13 c0       	rjmp	.+38     	; 0xcfe <usb_serial_write+0x6a>
			SREG = intr_state;
     cd8:	3f bf       	out	0x3f, r19	; 63
			// have we waited too long?  This happens if the user
			// is not running an application that is listening
			if (UDFNUML == timeout) {
     cda:	80 91 e4 00 	lds	r24, 0x00E4
     cde:	89 17       	cp	r24, r25
     ce0:	21 f4       	brne	.+8      	; 0xcea <usb_serial_write+0x56>
				transmit_previous_timeout = 1;
     ce2:	81 e0       	ldi	r24, 0x01	; 1
     ce4:	80 93 35 01 	sts	0x0135, r24
     ce8:	f9 c0       	rjmp	.+498    	; 0xedc <usb_serial_write+0x248>
				return -1;
			}
			// has the USB gone offline?
			if (!usb_configuration) return -1;
     cea:	80 91 32 01 	lds	r24, 0x0132
     cee:	88 23       	and	r24, r24
     cf0:	09 f4       	brne	.+2      	; 0xcf4 <usb_serial_write+0x60>
     cf2:	f4 c0       	rjmp	.+488    	; 0xedc <usb_serial_write+0x248>
			// get ready to try checking again
			intr_state = SREG;
     cf4:	3f b7       	in	r19, 0x3f	; 63
			cli();
     cf6:	f8 94       	cli
			UENUM = CDC_TX_ENDPOINT;
     cf8:	b0 93 e9 00 	sts	0x00E9, r27
     cfc:	e9 cf       	rjmp	.-46     	; 0xcd0 <usb_serial_write+0x3c>
		}

		// compute how many bytes will fit into the next packet
		write_size = CDC_TX_SIZE - UEBCLX;
     cfe:	80 91 f2 00 	lds	r24, 0x00F2
     d02:	24 2f       	mov	r18, r20
     d04:	28 1b       	sub	r18, r24
		if (write_size > size) write_size = size;
     d06:	82 2f       	mov	r24, r18
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	68 17       	cp	r22, r24
     d0c:	79 07       	cpc	r23, r25
     d0e:	08 f4       	brcc	.+2      	; 0xd12 <usb_serial_write+0x7e>
     d10:	26 2f       	mov	r18, r22
		size -= write_size;

		// write the packet
		switch (write_size) {
     d12:	82 2f       	mov	r24, r18
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	81 34       	cpi	r24, 0x41	; 65
     d18:	91 05       	cpc	r25, r1
     d1a:	08 f0       	brcs	.+2      	; 0xd1e <usb_serial_write+0x8a>
     d1c:	c6 c0       	rjmp	.+396    	; 0xeaa <usb_serial_write+0x216>
     d1e:	84 5b       	subi	r24, 0xB4	; 180
     d20:	9f 4f       	sbci	r25, 0xFF	; 255
     d22:	fc 01       	movw	r30, r24
     d24:	ee 0f       	add	r30, r30
     d26:	ff 1f       	adc	r31, r31
     d28:	05 90       	lpm	r0, Z+
     d2a:	f4 91       	lpm	r31, Z+
     d2c:	e0 2d       	mov	r30, r0
     d2e:	09 94       	ijmp
			#if (CDC_TX_SIZE == 64)
			case 64: UEDATX = *buffer++;
     d30:	89 91       	ld	r24, Y+
     d32:	80 93 f1 00 	sts	0x00F1, r24
			case 63: UEDATX = *buffer++;
     d36:	89 91       	ld	r24, Y+
     d38:	80 93 f1 00 	sts	0x00F1, r24
			case 62: UEDATX = *buffer++;
     d3c:	89 91       	ld	r24, Y+
     d3e:	80 93 f1 00 	sts	0x00F1, r24
			case 61: UEDATX = *buffer++;
     d42:	89 91       	ld	r24, Y+
     d44:	80 93 f1 00 	sts	0x00F1, r24
			case 60: UEDATX = *buffer++;
     d48:	89 91       	ld	r24, Y+
     d4a:	80 93 f1 00 	sts	0x00F1, r24
			case 59: UEDATX = *buffer++;
     d4e:	89 91       	ld	r24, Y+
     d50:	80 93 f1 00 	sts	0x00F1, r24
			case 58: UEDATX = *buffer++;
     d54:	89 91       	ld	r24, Y+
     d56:	80 93 f1 00 	sts	0x00F1, r24
			case 57: UEDATX = *buffer++;
     d5a:	89 91       	ld	r24, Y+
     d5c:	80 93 f1 00 	sts	0x00F1, r24
			case 56: UEDATX = *buffer++;
     d60:	89 91       	ld	r24, Y+
     d62:	80 93 f1 00 	sts	0x00F1, r24
			case 55: UEDATX = *buffer++;
     d66:	89 91       	ld	r24, Y+
     d68:	80 93 f1 00 	sts	0x00F1, r24
			case 54: UEDATX = *buffer++;
     d6c:	89 91       	ld	r24, Y+
     d6e:	80 93 f1 00 	sts	0x00F1, r24
			case 53: UEDATX = *buffer++;
     d72:	89 91       	ld	r24, Y+
     d74:	80 93 f1 00 	sts	0x00F1, r24
			case 52: UEDATX = *buffer++;
     d78:	89 91       	ld	r24, Y+
     d7a:	80 93 f1 00 	sts	0x00F1, r24
			case 51: UEDATX = *buffer++;
     d7e:	89 91       	ld	r24, Y+
     d80:	80 93 f1 00 	sts	0x00F1, r24
			case 50: UEDATX = *buffer++;
     d84:	89 91       	ld	r24, Y+
     d86:	80 93 f1 00 	sts	0x00F1, r24
			case 49: UEDATX = *buffer++;
     d8a:	89 91       	ld	r24, Y+
     d8c:	80 93 f1 00 	sts	0x00F1, r24
			case 48: UEDATX = *buffer++;
     d90:	89 91       	ld	r24, Y+
     d92:	80 93 f1 00 	sts	0x00F1, r24
			case 47: UEDATX = *buffer++;
     d96:	89 91       	ld	r24, Y+
     d98:	80 93 f1 00 	sts	0x00F1, r24
			case 46: UEDATX = *buffer++;
     d9c:	89 91       	ld	r24, Y+
     d9e:	80 93 f1 00 	sts	0x00F1, r24
			case 45: UEDATX = *buffer++;
     da2:	89 91       	ld	r24, Y+
     da4:	80 93 f1 00 	sts	0x00F1, r24
			case 44: UEDATX = *buffer++;
     da8:	89 91       	ld	r24, Y+
     daa:	80 93 f1 00 	sts	0x00F1, r24
			case 43: UEDATX = *buffer++;
     dae:	89 91       	ld	r24, Y+
     db0:	80 93 f1 00 	sts	0x00F1, r24
			case 42: UEDATX = *buffer++;
     db4:	89 91       	ld	r24, Y+
     db6:	80 93 f1 00 	sts	0x00F1, r24
			case 41: UEDATX = *buffer++;
     dba:	89 91       	ld	r24, Y+
     dbc:	80 93 f1 00 	sts	0x00F1, r24
			case 40: UEDATX = *buffer++;
     dc0:	89 91       	ld	r24, Y+
     dc2:	80 93 f1 00 	sts	0x00F1, r24
			case 39: UEDATX = *buffer++;
     dc6:	89 91       	ld	r24, Y+
     dc8:	80 93 f1 00 	sts	0x00F1, r24
			case 38: UEDATX = *buffer++;
     dcc:	89 91       	ld	r24, Y+
     dce:	80 93 f1 00 	sts	0x00F1, r24
			case 37: UEDATX = *buffer++;
     dd2:	89 91       	ld	r24, Y+
     dd4:	80 93 f1 00 	sts	0x00F1, r24
			case 36: UEDATX = *buffer++;
     dd8:	89 91       	ld	r24, Y+
     dda:	80 93 f1 00 	sts	0x00F1, r24
			case 35: UEDATX = *buffer++;
     dde:	89 91       	ld	r24, Y+
     de0:	80 93 f1 00 	sts	0x00F1, r24
			case 34: UEDATX = *buffer++;
     de4:	89 91       	ld	r24, Y+
     de6:	80 93 f1 00 	sts	0x00F1, r24
			case 33: UEDATX = *buffer++;
     dea:	89 91       	ld	r24, Y+
     dec:	80 93 f1 00 	sts	0x00F1, r24
			#endif
			#if (CDC_TX_SIZE >= 32)
			case 32: UEDATX = *buffer++;
     df0:	89 91       	ld	r24, Y+
     df2:	80 93 f1 00 	sts	0x00F1, r24
			case 31: UEDATX = *buffer++;
     df6:	89 91       	ld	r24, Y+
     df8:	80 93 f1 00 	sts	0x00F1, r24
			case 30: UEDATX = *buffer++;
     dfc:	89 91       	ld	r24, Y+
     dfe:	80 93 f1 00 	sts	0x00F1, r24
			case 29: UEDATX = *buffer++;
     e02:	89 91       	ld	r24, Y+
     e04:	80 93 f1 00 	sts	0x00F1, r24
			case 28: UEDATX = *buffer++;
     e08:	89 91       	ld	r24, Y+
     e0a:	80 93 f1 00 	sts	0x00F1, r24
			case 27: UEDATX = *buffer++;
     e0e:	89 91       	ld	r24, Y+
     e10:	80 93 f1 00 	sts	0x00F1, r24
			case 26: UEDATX = *buffer++;
     e14:	89 91       	ld	r24, Y+
     e16:	80 93 f1 00 	sts	0x00F1, r24
			case 25: UEDATX = *buffer++;
     e1a:	89 91       	ld	r24, Y+
     e1c:	80 93 f1 00 	sts	0x00F1, r24
			case 24: UEDATX = *buffer++;
     e20:	89 91       	ld	r24, Y+
     e22:	80 93 f1 00 	sts	0x00F1, r24
			case 23: UEDATX = *buffer++;
     e26:	89 91       	ld	r24, Y+
     e28:	80 93 f1 00 	sts	0x00F1, r24
			case 22: UEDATX = *buffer++;
     e2c:	89 91       	ld	r24, Y+
     e2e:	80 93 f1 00 	sts	0x00F1, r24
			case 21: UEDATX = *buffer++;
     e32:	89 91       	ld	r24, Y+
     e34:	80 93 f1 00 	sts	0x00F1, r24
			case 20: UEDATX = *buffer++;
     e38:	89 91       	ld	r24, Y+
     e3a:	80 93 f1 00 	sts	0x00F1, r24
			case 19: UEDATX = *buffer++;
     e3e:	89 91       	ld	r24, Y+
     e40:	80 93 f1 00 	sts	0x00F1, r24
			case 18: UEDATX = *buffer++;
     e44:	89 91       	ld	r24, Y+
     e46:	80 93 f1 00 	sts	0x00F1, r24
			case 17: UEDATX = *buffer++;
     e4a:	89 91       	ld	r24, Y+
     e4c:	80 93 f1 00 	sts	0x00F1, r24
			#endif
			#if (CDC_TX_SIZE >= 16)
			case 16: UEDATX = *buffer++;
     e50:	89 91       	ld	r24, Y+
     e52:	80 93 f1 00 	sts	0x00F1, r24
			case 15: UEDATX = *buffer++;
     e56:	89 91       	ld	r24, Y+
     e58:	80 93 f1 00 	sts	0x00F1, r24
			case 14: UEDATX = *buffer++;
     e5c:	89 91       	ld	r24, Y+
     e5e:	80 93 f1 00 	sts	0x00F1, r24
			case 13: UEDATX = *buffer++;
     e62:	89 91       	ld	r24, Y+
     e64:	80 93 f1 00 	sts	0x00F1, r24
			case 12: UEDATX = *buffer++;
     e68:	89 91       	ld	r24, Y+
     e6a:	80 93 f1 00 	sts	0x00F1, r24
			case 11: UEDATX = *buffer++;
     e6e:	89 91       	ld	r24, Y+
     e70:	80 93 f1 00 	sts	0x00F1, r24
			case 10: UEDATX = *buffer++;
     e74:	89 91       	ld	r24, Y+
     e76:	80 93 f1 00 	sts	0x00F1, r24
			case  9: UEDATX = *buffer++;
     e7a:	89 91       	ld	r24, Y+
     e7c:	80 93 f1 00 	sts	0x00F1, r24
			#endif
			case  8: UEDATX = *buffer++;
     e80:	89 91       	ld	r24, Y+
     e82:	80 93 f1 00 	sts	0x00F1, r24
			case  7: UEDATX = *buffer++;
     e86:	89 91       	ld	r24, Y+
     e88:	80 93 f1 00 	sts	0x00F1, r24
			case  6: UEDATX = *buffer++;
     e8c:	89 91       	ld	r24, Y+
     e8e:	80 93 f1 00 	sts	0x00F1, r24
			case  5: UEDATX = *buffer++;
     e92:	89 91       	ld	r24, Y+
     e94:	80 93 f1 00 	sts	0x00F1, r24
			case  4: UEDATX = *buffer++;
     e98:	89 91       	ld	r24, Y+
     e9a:	80 93 f1 00 	sts	0x00F1, r24
			case  3: UEDATX = *buffer++;
     e9e:	89 91       	ld	r24, Y+
     ea0:	80 93 f1 00 	sts	0x00F1, r24
			case  2: UEDATX = *buffer++;
     ea4:	89 91       	ld	r24, Y+
     ea6:	80 93 f1 00 	sts	0x00F1, r24
			default:
			case  1: UEDATX = *buffer++;
     eaa:	89 91       	ld	r24, Y+
     eac:	80 93 f1 00 	sts	0x00F1, r24
			case  0: break;
		}
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
     eb0:	80 91 e8 00 	lds	r24, 0x00E8
     eb4:	85 fd       	sbrc	r24, 5
     eb6:	02 c0       	rjmp	.+4      	; 0xebc <usb_serial_write+0x228>
     eb8:	50 93 e8 00 	sts	0x00E8, r21
		}

		// compute how many bytes will fit into the next packet
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;
     ebc:	62 1b       	sub	r22, r18
     ebe:	71 09       	sbc	r23, r1
			case  1: UEDATX = *buffer++;
			case  0: break;
		}
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
     ec0:	a0 93 34 01 	sts	0x0134, r26
		SREG = intr_state;
     ec4:	3f bf       	out	0x3f, r19	; 63
     ec6:	04 c0       	rjmp	.+8      	; 0xed0 <usb_serial_write+0x23c>
			// has the USB gone offline?
			if (!usb_configuration) return -1;
			// get ready to try checking again
			intr_state = SREG;
			cli();
			UENUM = CDC_TX_ENDPOINT;
     ec8:	b4 e0       	ldi	r27, 0x04	; 4
		}

		// compute how many bytes will fit into the next packet
		write_size = CDC_TX_SIZE - UEBCLX;
     eca:	40 e4       	ldi	r20, 0x40	; 64
			default:
			case  1: UEDATX = *buffer++;
			case  0: break;
		}
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
     ecc:	5a e3       	ldi	r21, 0x3A	; 58
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
     ece:	a5 e0       	ldi	r26, 0x05	; 5
			return -1;
		}
		transmit_previous_timeout = 0;
	}
	// each iteration of this loop transmits a packet
	while (size) {
     ed0:	61 15       	cp	r22, r1
     ed2:	71 05       	cpc	r23, r1
     ed4:	09 f0       	breq	.+2      	; 0xed8 <usb_serial_write+0x244>
     ed6:	f9 ce       	rjmp	.-526    	; 0xcca <usb_serial_write+0x36>
     ed8:	80 e0       	ldi	r24, 0x00	; 0
     eda:	01 c0       	rjmp	.+2      	; 0xede <usb_serial_write+0x24a>
     edc:	8f ef       	ldi	r24, 0xFF	; 255
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
		SREG = intr_state;
	}
	return 0;
}
     ede:	df 91       	pop	r29
     ee0:	cf 91       	pop	r28
     ee2:	08 95       	ret

00000ee4 <usb_serial_get_control>:
	return cdc_line_coding[6];
}
uint8_t usb_serial_get_control(void)
{
	return cdc_line_rtsdtr;
}
     ee4:	80 91 33 01 	lds	r24, 0x0133
     ee8:	08 95       	ret

00000eea <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
     eea:	1f 92       	push	r1
     eec:	0f 92       	push	r0
     eee:	0f b6       	in	r0, 0x3f	; 63
     ef0:	0f 92       	push	r0
     ef2:	11 24       	eor	r1, r1
     ef4:	8f 93       	push	r24
     ef6:	9f 93       	push	r25
	uint8_t intbits, t;

        intbits = UDINT;
     ef8:	80 91 e1 00 	lds	r24, 0x00E1
        UDINT = 0;
     efc:	10 92 e1 00 	sts	0x00E1, r1
        if (intbits & (1<<EORSTI)) {
     f00:	98 2f       	mov	r25, r24
     f02:	83 ff       	sbrs	r24, 3
     f04:	11 c0       	rjmp	.+34     	; 0xf28 <__vector_10+0x3e>
		UENUM = 0;
     f06:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	80 93 eb 00 	sts	0x00EB, r24
		UECFG0X = EP_TYPE_CONTROL;
     f10:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
     f14:	82 e1       	ldi	r24, 0x12	; 18
     f16:	80 93 ed 00 	sts	0x00ED, r24
		UEIENX = (1<<RXSTPE);
     f1a:	88 e0       	ldi	r24, 0x08	; 8
     f1c:	80 93 f0 00 	sts	0x00F0, r24
		usb_configuration = 0;
     f20:	10 92 32 01 	sts	0x0132, r1
		cdc_line_rtsdtr = 0;
     f24:	10 92 33 01 	sts	0x0133, r1
        }
	if (intbits & (1<<SOFI)) {
     f28:	92 ff       	sbrs	r25, 2
     f2a:	13 c0       	rjmp	.+38     	; 0xf52 <__vector_10+0x68>
		if (usb_configuration) {
     f2c:	80 91 32 01 	lds	r24, 0x0132
     f30:	88 23       	and	r24, r24
     f32:	79 f0       	breq	.+30     	; 0xf52 <__vector_10+0x68>
			t = transmit_flush_timer;
     f34:	80 91 34 01 	lds	r24, 0x0134
			if (t) {
     f38:	88 23       	and	r24, r24
     f3a:	59 f0       	breq	.+22     	; 0xf52 <__vector_10+0x68>
				transmit_flush_timer = --t;
     f3c:	81 50       	subi	r24, 0x01	; 1
     f3e:	80 93 34 01 	sts	0x0134, r24
				if (!t) {
     f42:	88 23       	and	r24, r24
     f44:	31 f4       	brne	.+12     	; 0xf52 <__vector_10+0x68>
					UENUM = CDC_TX_ENDPOINT;
     f46:	84 e0       	ldi	r24, 0x04	; 4
     f48:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
     f4c:	8a e3       	ldi	r24, 0x3A	; 58
     f4e:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
     f52:	9f 91       	pop	r25
     f54:	8f 91       	pop	r24
     f56:	0f 90       	pop	r0
     f58:	0f be       	out	0x3f, r0	; 63
     f5a:	0f 90       	pop	r0
     f5c:	1f 90       	pop	r1
     f5e:	18 95       	reti

00000f60 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
     f60:	1f 92       	push	r1
     f62:	0f 92       	push	r0
     f64:	0f b6       	in	r0, 0x3f	; 63
     f66:	0f 92       	push	r0
     f68:	0b b6       	in	r0, 0x3b	; 59
     f6a:	0f 92       	push	r0
     f6c:	11 24       	eor	r1, r1
     f6e:	0f 93       	push	r16
     f70:	1f 93       	push	r17
     f72:	2f 93       	push	r18
     f74:	3f 93       	push	r19
     f76:	4f 93       	push	r20
     f78:	5f 93       	push	r21
     f7a:	6f 93       	push	r22
     f7c:	7f 93       	push	r23
     f7e:	8f 93       	push	r24
     f80:	9f 93       	push	r25
     f82:	af 93       	push	r26
     f84:	bf 93       	push	r27
     f86:	ef 93       	push	r30
     f88:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
     f8a:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
     f8e:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
     f92:	83 ff       	sbrs	r24, 3
     f94:	3c c1       	rjmp	.+632    	; 0x120e <__vector_11+0x2ae>
                bmRequestType = UEDATX;
     f96:	40 91 f1 00 	lds	r20, 0x00F1
                bRequest = UEDATX;
     f9a:	30 91 f1 00 	lds	r19, 0x00F1
                wValue = UEDATX;
     f9e:	80 91 f1 00 	lds	r24, 0x00F1
     fa2:	68 2f       	mov	r22, r24
     fa4:	70 e0       	ldi	r23, 0x00	; 0
                wValue |= (UEDATX << 8);
     fa6:	20 91 f1 00 	lds	r18, 0x00F1
     faa:	92 2f       	mov	r25, r18
     fac:	80 e0       	ldi	r24, 0x00	; 0
     fae:	68 2b       	or	r22, r24
     fb0:	79 2b       	or	r23, r25
                wIndex = UEDATX;
     fb2:	80 91 f1 00 	lds	r24, 0x00F1
     fb6:	a8 2f       	mov	r26, r24
     fb8:	b0 e0       	ldi	r27, 0x00	; 0
                wIndex |= (UEDATX << 8);
     fba:	20 91 f1 00 	lds	r18, 0x00F1
     fbe:	92 2f       	mov	r25, r18
     fc0:	80 e0       	ldi	r24, 0x00	; 0
     fc2:	a8 2b       	or	r26, r24
     fc4:	b9 2b       	or	r27, r25
                wLength = UEDATX;
     fc6:	10 91 f1 00 	lds	r17, 0x00F1
                wLength |= (UEDATX << 8);
     fca:	00 91 f1 00 	lds	r16, 0x00F1
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
     fce:	82 ef       	ldi	r24, 0xF2	; 242
     fd0:	80 93 e8 00 	sts	0x00E8, r24
                if (bRequest == GET_DESCRIPTOR) {
     fd4:	36 30       	cpi	r19, 0x06	; 6
     fd6:	09 f0       	breq	.+2      	; 0xfda <__vector_11+0x7a>
     fd8:	5a c0       	rjmp	.+180    	; 0x108e <__vector_11+0x12e>
     fda:	21 e2       	ldi	r18, 0x21	; 33
     fdc:	31 e0       	ldi	r19, 0x01	; 1
     fde:	a9 01       	movw	r20, r18
     fe0:	45 50       	subi	r20, 0x05	; 5
     fe2:	50 40       	sbci	r21, 0x00	; 0
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
     fe4:	f9 01       	movw	r30, r18
     fe6:	37 97       	sbiw	r30, 0x07	; 7
				}
				desc_val = pgm_read_word(list);
     fe8:	85 91       	lpm	r24, Z+
     fea:	94 91       	lpm	r25, Z+
				if (desc_val != wValue) {
     fec:	86 17       	cp	r24, r22
     fee:	97 07       	cpc	r25, r23
     ff0:	01 f5       	brne	.+64     	; 0x1032 <__vector_11+0xd2>
					list += sizeof(struct descriptor_list_struct);
					continue;
				}
				list += 2;
				desc_val = pgm_read_word(list);
     ff2:	fa 01       	movw	r30, r20
     ff4:	85 91       	lpm	r24, Z+
     ff6:	94 91       	lpm	r25, Z+
				if (desc_val != wIndex) {
     ff8:	8a 17       	cp	r24, r26
     ffa:	9b 07       	cpc	r25, r27
     ffc:	d1 f4       	brne	.+52     	; 0x1032 <__vector_11+0xd2>
					list += sizeof(struct descriptor_list_struct)-2;
					continue;
				}
				list += 2;
     ffe:	9a 01       	movw	r18, r20
    1000:	2e 5f       	subi	r18, 0xFE	; 254
    1002:	3f 4f       	sbci	r19, 0xFF	; 255
				desc_addr = (const uint8_t *)pgm_read_word(list);
    1004:	f9 01       	movw	r30, r18
    1006:	65 91       	lpm	r22, Z+
    1008:	74 91       	lpm	r23, Z+
				list += 2;
				desc_length = pgm_read_byte(list);
    100a:	2e 5f       	subi	r18, 0xFE	; 254
    100c:	3f 4f       	sbci	r19, 0xFF	; 255
    100e:	f9 01       	movw	r30, r18
    1010:	44 91       	lpm	r20, Z+
                bRequest = UEDATX;
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
    1012:	21 2f       	mov	r18, r17
    1014:	30 e0       	ldi	r19, 0x00	; 0
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    1016:	90 2f       	mov	r25, r16
    1018:	80 e0       	ldi	r24, 0x00	; 0
    101a:	28 2b       	or	r18, r24
    101c:	39 2b       	or	r19, r25
    101e:	2f 3f       	cpi	r18, 0xFF	; 255
    1020:	31 05       	cpc	r19, r1
    1022:	19 f0       	breq	.+6      	; 0x102a <__vector_11+0xca>
    1024:	10 f0       	brcs	.+4      	; 0x102a <__vector_11+0xca>
    1026:	2f ef       	ldi	r18, 0xFF	; 255
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	24 17       	cp	r18, r20
    102c:	58 f4       	brcc	.+22     	; 0x1044 <__vector_11+0xe4>
    102e:	42 2f       	mov	r20, r18
    1030:	09 c0       	rjmp	.+18     	; 0x1044 <__vector_11+0xe4>
    1032:	29 5f       	subi	r18, 0xF9	; 249
    1034:	3f 4f       	sbci	r19, 0xFF	; 255
    1036:	49 5f       	subi	r20, 0xF9	; 249
    1038:	5f 4f       	sbci	r21, 0xFF	; 255
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
    103a:	f1 e0       	ldi	r31, 0x01	; 1
    103c:	2b 34       	cpi	r18, 0x4B	; 75
    103e:	3f 07       	cpc	r19, r31
    1040:	89 f6       	brne	.-94     	; 0xfe4 <__vector_11+0x84>
    1042:	e5 c0       	rjmp	.+458    	; 0x120e <__vector_11+0x2ae>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1044:	5e ef       	ldi	r21, 0xFE	; 254
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    1046:	80 91 e8 00 	lds	r24, 0x00E8
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    104a:	28 2f       	mov	r18, r24
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	c9 01       	movw	r24, r18
    1050:	85 70       	andi	r24, 0x05	; 5
    1052:	90 70       	andi	r25, 0x00	; 0
    1054:	89 2b       	or	r24, r25
    1056:	b9 f3       	breq	.-18     	; 0x1046 <__vector_11+0xe6>
				if (i & (1<<RXOUTI)) return;	// abort
    1058:	22 fd       	sbrc	r18, 2
    105a:	dc c0       	rjmp	.+440    	; 0x1214 <__vector_11+0x2b4>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    105c:	34 2f       	mov	r19, r20
    105e:	41 31       	cpi	r20, 0x11	; 17
    1060:	08 f0       	brcs	.+2      	; 0x1064 <__vector_11+0x104>
    1062:	30 e1       	ldi	r19, 0x10	; 16
    1064:	23 2f       	mov	r18, r19
    1066:	cb 01       	movw	r24, r22
    1068:	06 c0       	rjmp	.+12     	; 0x1076 <__vector_11+0x116>
				for (i = n; i; i--) {
    106a:	fc 01       	movw	r30, r24
					UEDATX = pgm_read_byte(desc_addr++);
    106c:	01 96       	adiw	r24, 0x01	; 1
    106e:	e4 91       	lpm	r30, Z+
    1070:	e0 93 f1 00 	sts	0x00F1, r30
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    1074:	21 50       	subi	r18, 0x01	; 1
    1076:	22 23       	and	r18, r18
    1078:	c1 f7       	brne	.-16     	; 0x106a <__vector_11+0x10a>
    107a:	63 0f       	add	r22, r19
    107c:	71 1d       	adc	r23, r1
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
    107e:	43 1b       	sub	r20, r19
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1080:	50 93 e8 00 	sts	0x00E8, r21
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    1084:	44 23       	and	r20, r20
    1086:	f9 f6       	brne	.-66     	; 0x1046 <__vector_11+0xe6>
    1088:	30 31       	cpi	r19, 0x10	; 16
    108a:	e9 f2       	breq	.-70     	; 0x1046 <__vector_11+0xe6>
    108c:	c3 c0       	rjmp	.+390    	; 0x1214 <__vector_11+0x2b4>
			return;
                }
		if (bRequest == SET_ADDRESS) {
    108e:	35 30       	cpi	r19, 0x05	; 5
    1090:	61 f4       	brne	.+24     	; 0x10aa <__vector_11+0x14a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1092:	8e ef       	ldi	r24, 0xFE	; 254
    1094:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1098:	80 91 e8 00 	lds	r24, 0x00E8
    109c:	80 ff       	sbrs	r24, 0
    109e:	fc cf       	rjmp	.-8      	; 0x1098 <__vector_11+0x138>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
    10a0:	86 2f       	mov	r24, r22
    10a2:	80 68       	ori	r24, 0x80	; 128
    10a4:	80 93 e3 00 	sts	0x00E3, r24
    10a8:	b5 c0       	rjmp	.+362    	; 0x1214 <__vector_11+0x2b4>
			return;
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    10aa:	39 30       	cpi	r19, 0x09	; 9
    10ac:	51 f5       	brne	.+84     	; 0x1102 <__vector_11+0x1a2>
    10ae:	44 23       	and	r20, r20
    10b0:	09 f0       	breq	.+2      	; 0x10b4 <__vector_11+0x154>
    10b2:	ad c0       	rjmp	.+346    	; 0x120e <__vector_11+0x2ae>
			usb_configuration = wValue;
    10b4:	60 93 32 01 	sts	0x0132, r22
			cdc_line_rtsdtr = 0;
    10b8:	10 92 33 01 	sts	0x0133, r1
			transmit_flush_timer = 0;
    10bc:	10 92 34 01 	sts	0x0134, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    10c0:	8e ef       	ldi	r24, 0xFE	; 254
    10c2:	80 93 e8 00 	sts	0x00E8, r24
    10c6:	84 e4       	ldi	r24, 0x44	; 68
    10c8:	91 e0       	ldi	r25, 0x01	; 1
    10ca:	21 e0       	ldi	r18, 0x01	; 1
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
    10cc:	20 93 e9 00 	sts	0x00E9, r18
				en = pgm_read_byte(cfg++);
    10d0:	fc 01       	movw	r30, r24
    10d2:	01 96       	adiw	r24, 0x01	; 1
    10d4:	e4 91       	lpm	r30, Z+
				UECONX = en;
    10d6:	e0 93 eb 00 	sts	0x00EB, r30
				if (en) {
    10da:	ee 23       	and	r30, r30
    10dc:	69 f0       	breq	.+26     	; 0x10f8 <__vector_11+0x198>
					UECFG0X = pgm_read_byte(cfg++);
    10de:	ac 01       	movw	r20, r24
    10e0:	4f 5f       	subi	r20, 0xFF	; 255
    10e2:	5f 4f       	sbci	r21, 0xFF	; 255
    10e4:	fc 01       	movw	r30, r24
    10e6:	84 91       	lpm	r24, Z+
    10e8:	80 93 ec 00 	sts	0x00EC, r24
					UECFG1X = pgm_read_byte(cfg++);
    10ec:	ca 01       	movw	r24, r20
    10ee:	01 96       	adiw	r24, 0x01	; 1
    10f0:	fa 01       	movw	r30, r20
    10f2:	34 91       	lpm	r19, Z+
    10f4:	30 93 ed 00 	sts	0x00ED, r19
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    10f8:	2f 5f       	subi	r18, 0xFF	; 255
    10fa:	25 30       	cpi	r18, 0x05	; 5
    10fc:	39 f7       	brne	.-50     	; 0x10cc <__vector_11+0x16c>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
    10fe:	8e e1       	ldi	r24, 0x1E	; 30
    1100:	81 c0       	rjmp	.+258    	; 0x1204 <__vector_11+0x2a4>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    1102:	38 30       	cpi	r19, 0x08	; 8
    1104:	61 f4       	brne	.+24     	; 0x111e <__vector_11+0x1be>
    1106:	40 38       	cpi	r20, 0x80	; 128
    1108:	09 f0       	breq	.+2      	; 0x110c <__vector_11+0x1ac>
    110a:	81 c0       	rjmp	.+258    	; 0x120e <__vector_11+0x2ae>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    110c:	80 91 e8 00 	lds	r24, 0x00E8
    1110:	80 ff       	sbrs	r24, 0
    1112:	fc cf       	rjmp	.-8      	; 0x110c <__vector_11+0x1ac>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
    1114:	80 91 32 01 	lds	r24, 0x0132
    1118:	80 93 f1 00 	sts	0x00F1, r24
    111c:	50 c0       	rjmp	.+160    	; 0x11be <__vector_11+0x25e>
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
    111e:	31 32       	cpi	r19, 0x21	; 33
    1120:	89 f4       	brne	.+34     	; 0x1144 <__vector_11+0x1e4>
    1122:	41 3a       	cpi	r20, 0xA1	; 161
    1124:	09 f0       	breq	.+2      	; 0x1128 <__vector_11+0x1c8>
    1126:	73 c0       	rjmp	.+230    	; 0x120e <__vector_11+0x2ae>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1128:	80 91 e8 00 	lds	r24, 0x00E8
    112c:	80 ff       	sbrs	r24, 0
    112e:	fc cf       	rjmp	.-8      	; 0x1128 <__vector_11+0x1c8>
    1130:	e8 e0       	ldi	r30, 0x08	; 8
    1132:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
    1134:	81 91       	ld	r24, Z+
    1136:	80 93 f1 00 	sts	0x00F1, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	ef 30       	cpi	r30, 0x0F	; 15
    113e:	f8 07       	cpc	r31, r24
    1140:	c9 f7       	brne	.-14     	; 0x1134 <__vector_11+0x1d4>
    1142:	3d c0       	rjmp	.+122    	; 0x11be <__vector_11+0x25e>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
    1144:	30 32       	cpi	r19, 0x20	; 32
    1146:	a1 f4       	brne	.+40     	; 0x1170 <__vector_11+0x210>
    1148:	41 32       	cpi	r20, 0x21	; 33
    114a:	09 f0       	breq	.+2      	; 0x114e <__vector_11+0x1ee>
    114c:	60 c0       	rjmp	.+192    	; 0x120e <__vector_11+0x2ae>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
    114e:	80 91 e8 00 	lds	r24, 0x00E8
    1152:	82 ff       	sbrs	r24, 2
    1154:	fc cf       	rjmp	.-8      	; 0x114e <__vector_11+0x1ee>
    1156:	e8 e0       	ldi	r30, 0x08	; 8
    1158:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
    115a:	80 91 f1 00 	lds	r24, 0x00F1
    115e:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	ef 30       	cpi	r30, 0x0F	; 15
    1164:	f8 07       	cpc	r31, r24
    1166:	c9 f7       	brne	.-14     	; 0x115a <__vector_11+0x1fa>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
    1168:	8b ef       	ldi	r24, 0xFB	; 251
    116a:	80 93 e8 00 	sts	0x00E8, r24
    116e:	27 c0       	rjmp	.+78     	; 0x11be <__vector_11+0x25e>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
    1170:	32 32       	cpi	r19, 0x22	; 34
    1172:	51 f4       	brne	.+20     	; 0x1188 <__vector_11+0x228>
    1174:	41 32       	cpi	r20, 0x21	; 33
    1176:	09 f0       	breq	.+2      	; 0x117a <__vector_11+0x21a>
    1178:	4a c0       	rjmp	.+148    	; 0x120e <__vector_11+0x2ae>
			cdc_line_rtsdtr = wValue;
    117a:	60 93 33 01 	sts	0x0133, r22


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    117e:	80 91 e8 00 	lds	r24, 0x00E8
    1182:	80 ff       	sbrs	r24, 0
    1184:	fc cf       	rjmp	.-8      	; 0x117e <__vector_11+0x21e>
    1186:	1b c0       	rjmp	.+54     	; 0x11be <__vector_11+0x25e>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
    1188:	33 23       	and	r19, r19
    118a:	e9 f4       	brne	.+58     	; 0x11c6 <__vector_11+0x266>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    118c:	80 91 e8 00 	lds	r24, 0x00E8
    1190:	80 ff       	sbrs	r24, 0
    1192:	fc cf       	rjmp	.-8      	; 0x118c <__vector_11+0x22c>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
    1194:	42 38       	cpi	r20, 0x82	; 130
    1196:	11 f0       	breq	.+4      	; 0x119c <__vector_11+0x23c>
    1198:	80 e0       	ldi	r24, 0x00	; 0
    119a:	0d c0       	rjmp	.+26     	; 0x11b6 <__vector_11+0x256>
				UENUM = wIndex;
    119c:	a0 93 e9 00 	sts	0x00E9, r26
				if (UECONX & (1<<STALLRQ)) i = 1;
    11a0:	80 91 eb 00 	lds	r24, 0x00EB
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	25 e0       	ldi	r18, 0x05	; 5
    11a8:	96 95       	lsr	r25
    11aa:	87 95       	ror	r24
    11ac:	2a 95       	dec	r18
    11ae:	e1 f7       	brne	.-8      	; 0x11a8 <__vector_11+0x248>
    11b0:	81 70       	andi	r24, 0x01	; 1
				UENUM = 0;
    11b2:	10 92 e9 00 	sts	0x00E9, r1
			}
			#endif
			UEDATX = i;
    11b6:	80 93 f1 00 	sts	0x00F1, r24
			UEDATX = 0;
    11ba:	10 92 f1 00 	sts	0x00F1, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    11be:	8e ef       	ldi	r24, 0xFE	; 254
    11c0:	80 93 e8 00 	sts	0x00E8, r24
    11c4:	27 c0       	rjmp	.+78     	; 0x1214 <__vector_11+0x2b4>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    11c6:	31 30       	cpi	r19, 0x01	; 1
    11c8:	11 f0       	breq	.+4      	; 0x11ce <__vector_11+0x26e>
    11ca:	33 30       	cpi	r19, 0x03	; 3
    11cc:	01 f5       	brne	.+64     	; 0x120e <__vector_11+0x2ae>
    11ce:	42 30       	cpi	r20, 0x02	; 2
    11d0:	f1 f4       	brne	.+60     	; 0x120e <__vector_11+0x2ae>
    11d2:	67 2b       	or	r22, r23
    11d4:	e1 f4       	brne	.+56     	; 0x120e <__vector_11+0x2ae>
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
    11d6:	2a 2f       	mov	r18, r26
    11d8:	2f 77       	andi	r18, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
    11da:	82 2f       	mov	r24, r18
    11dc:	81 50       	subi	r24, 0x01	; 1
    11de:	84 30       	cpi	r24, 0x04	; 4
    11e0:	b0 f4       	brcc	.+44     	; 0x120e <__vector_11+0x2ae>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    11e2:	8e ef       	ldi	r24, 0xFE	; 254
    11e4:	80 93 e8 00 	sts	0x00E8, r24
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
    11e8:	20 93 e9 00 	sts	0x00E9, r18
				if (bRequest == SET_FEATURE) {
    11ec:	33 30       	cpi	r19, 0x03	; 3
    11ee:	79 f0       	breq	.+30     	; 0x120e <__vector_11+0x2ae>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    11f0:	89 e1       	ldi	r24, 0x19	; 25
    11f2:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	02 c0       	rjmp	.+4      	; 0x1200 <__vector_11+0x2a0>
    11fc:	88 0f       	add	r24, r24
    11fe:	99 1f       	adc	r25, r25
    1200:	2a 95       	dec	r18
    1202:	e2 f7       	brpl	.-8      	; 0x11fc <__vector_11+0x29c>
    1204:	80 93 ea 00 	sts	0x00EA, r24
					UERST = 0;
    1208:	10 92 ea 00 	sts	0x00EA, r1
    120c:	03 c0       	rjmp	.+6      	; 0x1214 <__vector_11+0x2b4>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    120e:	81 e2       	ldi	r24, 0x21	; 33
    1210:	80 93 eb 00 	sts	0x00EB, r24
}
    1214:	ff 91       	pop	r31
    1216:	ef 91       	pop	r30
    1218:	bf 91       	pop	r27
    121a:	af 91       	pop	r26
    121c:	9f 91       	pop	r25
    121e:	8f 91       	pop	r24
    1220:	7f 91       	pop	r23
    1222:	6f 91       	pop	r22
    1224:	5f 91       	pop	r21
    1226:	4f 91       	pop	r20
    1228:	3f 91       	pop	r19
    122a:	2f 91       	pop	r18
    122c:	1f 91       	pop	r17
    122e:	0f 91       	pop	r16
    1230:	0f 90       	pop	r0
    1232:	0b be       	out	0x3b, r0	; 59
    1234:	0f 90       	pop	r0
    1236:	0f be       	out	0x3f, r0	; 63
    1238:	0f 90       	pop	r0
    123a:	1f 90       	pop	r1
    123c:	18 95       	reti

0000123e <__subsf3>:
    123e:	50 58       	subi	r21, 0x80	; 128

00001240 <__addsf3>:
    1240:	bb 27       	eor	r27, r27
    1242:	aa 27       	eor	r26, r26
    1244:	0e d0       	rcall	.+28     	; 0x1262 <__addsf3x>
    1246:	e0 c0       	rjmp	.+448    	; 0x1408 <__fp_round>
    1248:	d1 d0       	rcall	.+418    	; 0x13ec <__fp_pscA>
    124a:	30 f0       	brcs	.+12     	; 0x1258 <__addsf3+0x18>
    124c:	d6 d0       	rcall	.+428    	; 0x13fa <__fp_pscB>
    124e:	20 f0       	brcs	.+8      	; 0x1258 <__addsf3+0x18>
    1250:	31 f4       	brne	.+12     	; 0x125e <__addsf3+0x1e>
    1252:	9f 3f       	cpi	r25, 0xFF	; 255
    1254:	11 f4       	brne	.+4      	; 0x125a <__addsf3+0x1a>
    1256:	1e f4       	brtc	.+6      	; 0x125e <__addsf3+0x1e>
    1258:	c6 c0       	rjmp	.+396    	; 0x13e6 <__fp_nan>
    125a:	0e f4       	brtc	.+2      	; 0x125e <__addsf3+0x1e>
    125c:	e0 95       	com	r30
    125e:	e7 fb       	bst	r30, 7
    1260:	bc c0       	rjmp	.+376    	; 0x13da <__fp_inf>

00001262 <__addsf3x>:
    1262:	e9 2f       	mov	r30, r25
    1264:	e2 d0       	rcall	.+452    	; 0x142a <__fp_split3>
    1266:	80 f3       	brcs	.-32     	; 0x1248 <__addsf3+0x8>
    1268:	ba 17       	cp	r27, r26
    126a:	62 07       	cpc	r22, r18
    126c:	73 07       	cpc	r23, r19
    126e:	84 07       	cpc	r24, r20
    1270:	95 07       	cpc	r25, r21
    1272:	18 f0       	brcs	.+6      	; 0x127a <__addsf3x+0x18>
    1274:	71 f4       	brne	.+28     	; 0x1292 <__addsf3x+0x30>
    1276:	9e f5       	brtc	.+102    	; 0x12de <__addsf3x+0x7c>
    1278:	fa c0       	rjmp	.+500    	; 0x146e <__fp_zero>
    127a:	0e f4       	brtc	.+2      	; 0x127e <__addsf3x+0x1c>
    127c:	e0 95       	com	r30
    127e:	0b 2e       	mov	r0, r27
    1280:	ba 2f       	mov	r27, r26
    1282:	a0 2d       	mov	r26, r0
    1284:	0b 01       	movw	r0, r22
    1286:	b9 01       	movw	r22, r18
    1288:	90 01       	movw	r18, r0
    128a:	0c 01       	movw	r0, r24
    128c:	ca 01       	movw	r24, r20
    128e:	a0 01       	movw	r20, r0
    1290:	11 24       	eor	r1, r1
    1292:	ff 27       	eor	r31, r31
    1294:	59 1b       	sub	r21, r25
    1296:	99 f0       	breq	.+38     	; 0x12be <__addsf3x+0x5c>
    1298:	59 3f       	cpi	r21, 0xF9	; 249
    129a:	50 f4       	brcc	.+20     	; 0x12b0 <__addsf3x+0x4e>
    129c:	50 3e       	cpi	r21, 0xE0	; 224
    129e:	68 f1       	brcs	.+90     	; 0x12fa <__addsf3x+0x98>
    12a0:	1a 16       	cp	r1, r26
    12a2:	f0 40       	sbci	r31, 0x00	; 0
    12a4:	a2 2f       	mov	r26, r18
    12a6:	23 2f       	mov	r18, r19
    12a8:	34 2f       	mov	r19, r20
    12aa:	44 27       	eor	r20, r20
    12ac:	58 5f       	subi	r21, 0xF8	; 248
    12ae:	f3 cf       	rjmp	.-26     	; 0x1296 <__addsf3x+0x34>
    12b0:	46 95       	lsr	r20
    12b2:	37 95       	ror	r19
    12b4:	27 95       	ror	r18
    12b6:	a7 95       	ror	r26
    12b8:	f0 40       	sbci	r31, 0x00	; 0
    12ba:	53 95       	inc	r21
    12bc:	c9 f7       	brne	.-14     	; 0x12b0 <__addsf3x+0x4e>
    12be:	7e f4       	brtc	.+30     	; 0x12de <__addsf3x+0x7c>
    12c0:	1f 16       	cp	r1, r31
    12c2:	ba 0b       	sbc	r27, r26
    12c4:	62 0b       	sbc	r22, r18
    12c6:	73 0b       	sbc	r23, r19
    12c8:	84 0b       	sbc	r24, r20
    12ca:	ba f0       	brmi	.+46     	; 0x12fa <__addsf3x+0x98>
    12cc:	91 50       	subi	r25, 0x01	; 1
    12ce:	a1 f0       	breq	.+40     	; 0x12f8 <__addsf3x+0x96>
    12d0:	ff 0f       	add	r31, r31
    12d2:	bb 1f       	adc	r27, r27
    12d4:	66 1f       	adc	r22, r22
    12d6:	77 1f       	adc	r23, r23
    12d8:	88 1f       	adc	r24, r24
    12da:	c2 f7       	brpl	.-16     	; 0x12cc <__addsf3x+0x6a>
    12dc:	0e c0       	rjmp	.+28     	; 0x12fa <__addsf3x+0x98>
    12de:	ba 0f       	add	r27, r26
    12e0:	62 1f       	adc	r22, r18
    12e2:	73 1f       	adc	r23, r19
    12e4:	84 1f       	adc	r24, r20
    12e6:	48 f4       	brcc	.+18     	; 0x12fa <__addsf3x+0x98>
    12e8:	87 95       	ror	r24
    12ea:	77 95       	ror	r23
    12ec:	67 95       	ror	r22
    12ee:	b7 95       	ror	r27
    12f0:	f7 95       	ror	r31
    12f2:	9e 3f       	cpi	r25, 0xFE	; 254
    12f4:	08 f0       	brcs	.+2      	; 0x12f8 <__addsf3x+0x96>
    12f6:	b3 cf       	rjmp	.-154    	; 0x125e <__addsf3+0x1e>
    12f8:	93 95       	inc	r25
    12fa:	88 0f       	add	r24, r24
    12fc:	08 f0       	brcs	.+2      	; 0x1300 <__addsf3x+0x9e>
    12fe:	99 27       	eor	r25, r25
    1300:	ee 0f       	add	r30, r30
    1302:	97 95       	ror	r25
    1304:	87 95       	ror	r24
    1306:	08 95       	ret

00001308 <__fixunssfsi>:
    1308:	98 d0       	rcall	.+304    	; 0x143a <__fp_splitA>
    130a:	88 f0       	brcs	.+34     	; 0x132e <__fixunssfsi+0x26>
    130c:	9f 57       	subi	r25, 0x7F	; 127
    130e:	90 f0       	brcs	.+36     	; 0x1334 <__fixunssfsi+0x2c>
    1310:	b9 2f       	mov	r27, r25
    1312:	99 27       	eor	r25, r25
    1314:	b7 51       	subi	r27, 0x17	; 23
    1316:	a0 f0       	brcs	.+40     	; 0x1340 <__fixunssfsi+0x38>
    1318:	d1 f0       	breq	.+52     	; 0x134e <__fixunssfsi+0x46>
    131a:	66 0f       	add	r22, r22
    131c:	77 1f       	adc	r23, r23
    131e:	88 1f       	adc	r24, r24
    1320:	99 1f       	adc	r25, r25
    1322:	1a f0       	brmi	.+6      	; 0x132a <__fixunssfsi+0x22>
    1324:	ba 95       	dec	r27
    1326:	c9 f7       	brne	.-14     	; 0x131a <__fixunssfsi+0x12>
    1328:	12 c0       	rjmp	.+36     	; 0x134e <__fixunssfsi+0x46>
    132a:	b1 30       	cpi	r27, 0x01	; 1
    132c:	81 f0       	breq	.+32     	; 0x134e <__fixunssfsi+0x46>
    132e:	9f d0       	rcall	.+318    	; 0x146e <__fp_zero>
    1330:	b1 e0       	ldi	r27, 0x01	; 1
    1332:	08 95       	ret
    1334:	9c c0       	rjmp	.+312    	; 0x146e <__fp_zero>
    1336:	67 2f       	mov	r22, r23
    1338:	78 2f       	mov	r23, r24
    133a:	88 27       	eor	r24, r24
    133c:	b8 5f       	subi	r27, 0xF8	; 248
    133e:	39 f0       	breq	.+14     	; 0x134e <__fixunssfsi+0x46>
    1340:	b9 3f       	cpi	r27, 0xF9	; 249
    1342:	cc f3       	brlt	.-14     	; 0x1336 <__fixunssfsi+0x2e>
    1344:	86 95       	lsr	r24
    1346:	77 95       	ror	r23
    1348:	67 95       	ror	r22
    134a:	b3 95       	inc	r27
    134c:	d9 f7       	brne	.-10     	; 0x1344 <__fixunssfsi+0x3c>
    134e:	3e f4       	brtc	.+14     	; 0x135e <__fixunssfsi+0x56>
    1350:	90 95       	com	r25
    1352:	80 95       	com	r24
    1354:	70 95       	com	r23
    1356:	61 95       	neg	r22
    1358:	7f 4f       	sbci	r23, 0xFF	; 255
    135a:	8f 4f       	sbci	r24, 0xFF	; 255
    135c:	9f 4f       	sbci	r25, 0xFF	; 255
    135e:	08 95       	ret

00001360 <__floatunsisf>:
    1360:	e8 94       	clt
    1362:	09 c0       	rjmp	.+18     	; 0x1376 <__floatsisf+0x12>

00001364 <__floatsisf>:
    1364:	97 fb       	bst	r25, 7
    1366:	3e f4       	brtc	.+14     	; 0x1376 <__floatsisf+0x12>
    1368:	90 95       	com	r25
    136a:	80 95       	com	r24
    136c:	70 95       	com	r23
    136e:	61 95       	neg	r22
    1370:	7f 4f       	sbci	r23, 0xFF	; 255
    1372:	8f 4f       	sbci	r24, 0xFF	; 255
    1374:	9f 4f       	sbci	r25, 0xFF	; 255
    1376:	99 23       	and	r25, r25
    1378:	a9 f0       	breq	.+42     	; 0x13a4 <__floatsisf+0x40>
    137a:	f9 2f       	mov	r31, r25
    137c:	96 e9       	ldi	r25, 0x96	; 150
    137e:	bb 27       	eor	r27, r27
    1380:	93 95       	inc	r25
    1382:	f6 95       	lsr	r31
    1384:	87 95       	ror	r24
    1386:	77 95       	ror	r23
    1388:	67 95       	ror	r22
    138a:	b7 95       	ror	r27
    138c:	f1 11       	cpse	r31, r1
    138e:	f8 cf       	rjmp	.-16     	; 0x1380 <__floatsisf+0x1c>
    1390:	fa f4       	brpl	.+62     	; 0x13d0 <__floatsisf+0x6c>
    1392:	bb 0f       	add	r27, r27
    1394:	11 f4       	brne	.+4      	; 0x139a <__floatsisf+0x36>
    1396:	60 ff       	sbrs	r22, 0
    1398:	1b c0       	rjmp	.+54     	; 0x13d0 <__floatsisf+0x6c>
    139a:	6f 5f       	subi	r22, 0xFF	; 255
    139c:	7f 4f       	sbci	r23, 0xFF	; 255
    139e:	8f 4f       	sbci	r24, 0xFF	; 255
    13a0:	9f 4f       	sbci	r25, 0xFF	; 255
    13a2:	16 c0       	rjmp	.+44     	; 0x13d0 <__floatsisf+0x6c>
    13a4:	88 23       	and	r24, r24
    13a6:	11 f0       	breq	.+4      	; 0x13ac <__floatsisf+0x48>
    13a8:	96 e9       	ldi	r25, 0x96	; 150
    13aa:	11 c0       	rjmp	.+34     	; 0x13ce <__floatsisf+0x6a>
    13ac:	77 23       	and	r23, r23
    13ae:	21 f0       	breq	.+8      	; 0x13b8 <__floatsisf+0x54>
    13b0:	9e e8       	ldi	r25, 0x8E	; 142
    13b2:	87 2f       	mov	r24, r23
    13b4:	76 2f       	mov	r23, r22
    13b6:	05 c0       	rjmp	.+10     	; 0x13c2 <__floatsisf+0x5e>
    13b8:	66 23       	and	r22, r22
    13ba:	71 f0       	breq	.+28     	; 0x13d8 <__floatsisf+0x74>
    13bc:	96 e8       	ldi	r25, 0x86	; 134
    13be:	86 2f       	mov	r24, r22
    13c0:	70 e0       	ldi	r23, 0x00	; 0
    13c2:	60 e0       	ldi	r22, 0x00	; 0
    13c4:	2a f0       	brmi	.+10     	; 0x13d0 <__floatsisf+0x6c>
    13c6:	9a 95       	dec	r25
    13c8:	66 0f       	add	r22, r22
    13ca:	77 1f       	adc	r23, r23
    13cc:	88 1f       	adc	r24, r24
    13ce:	da f7       	brpl	.-10     	; 0x13c6 <__floatsisf+0x62>
    13d0:	88 0f       	add	r24, r24
    13d2:	96 95       	lsr	r25
    13d4:	87 95       	ror	r24
    13d6:	97 f9       	bld	r25, 7
    13d8:	08 95       	ret

000013da <__fp_inf>:
    13da:	97 f9       	bld	r25, 7
    13dc:	9f 67       	ori	r25, 0x7F	; 127
    13de:	80 e8       	ldi	r24, 0x80	; 128
    13e0:	70 e0       	ldi	r23, 0x00	; 0
    13e2:	60 e0       	ldi	r22, 0x00	; 0
    13e4:	08 95       	ret

000013e6 <__fp_nan>:
    13e6:	9f ef       	ldi	r25, 0xFF	; 255
    13e8:	80 ec       	ldi	r24, 0xC0	; 192
    13ea:	08 95       	ret

000013ec <__fp_pscA>:
    13ec:	00 24       	eor	r0, r0
    13ee:	0a 94       	dec	r0
    13f0:	16 16       	cp	r1, r22
    13f2:	17 06       	cpc	r1, r23
    13f4:	18 06       	cpc	r1, r24
    13f6:	09 06       	cpc	r0, r25
    13f8:	08 95       	ret

000013fa <__fp_pscB>:
    13fa:	00 24       	eor	r0, r0
    13fc:	0a 94       	dec	r0
    13fe:	12 16       	cp	r1, r18
    1400:	13 06       	cpc	r1, r19
    1402:	14 06       	cpc	r1, r20
    1404:	05 06       	cpc	r0, r21
    1406:	08 95       	ret

00001408 <__fp_round>:
    1408:	09 2e       	mov	r0, r25
    140a:	03 94       	inc	r0
    140c:	00 0c       	add	r0, r0
    140e:	11 f4       	brne	.+4      	; 0x1414 <__fp_round+0xc>
    1410:	88 23       	and	r24, r24
    1412:	52 f0       	brmi	.+20     	; 0x1428 <__fp_round+0x20>
    1414:	bb 0f       	add	r27, r27
    1416:	40 f4       	brcc	.+16     	; 0x1428 <__fp_round+0x20>
    1418:	bf 2b       	or	r27, r31
    141a:	11 f4       	brne	.+4      	; 0x1420 <__fp_round+0x18>
    141c:	60 ff       	sbrs	r22, 0
    141e:	04 c0       	rjmp	.+8      	; 0x1428 <__fp_round+0x20>
    1420:	6f 5f       	subi	r22, 0xFF	; 255
    1422:	7f 4f       	sbci	r23, 0xFF	; 255
    1424:	8f 4f       	sbci	r24, 0xFF	; 255
    1426:	9f 4f       	sbci	r25, 0xFF	; 255
    1428:	08 95       	ret

0000142a <__fp_split3>:
    142a:	57 fd       	sbrc	r21, 7
    142c:	90 58       	subi	r25, 0x80	; 128
    142e:	44 0f       	add	r20, r20
    1430:	55 1f       	adc	r21, r21
    1432:	59 f0       	breq	.+22     	; 0x144a <__fp_splitA+0x10>
    1434:	5f 3f       	cpi	r21, 0xFF	; 255
    1436:	71 f0       	breq	.+28     	; 0x1454 <__fp_splitA+0x1a>
    1438:	47 95       	ror	r20

0000143a <__fp_splitA>:
    143a:	88 0f       	add	r24, r24
    143c:	97 fb       	bst	r25, 7
    143e:	99 1f       	adc	r25, r25
    1440:	61 f0       	breq	.+24     	; 0x145a <__fp_splitA+0x20>
    1442:	9f 3f       	cpi	r25, 0xFF	; 255
    1444:	79 f0       	breq	.+30     	; 0x1464 <__fp_splitA+0x2a>
    1446:	87 95       	ror	r24
    1448:	08 95       	ret
    144a:	12 16       	cp	r1, r18
    144c:	13 06       	cpc	r1, r19
    144e:	14 06       	cpc	r1, r20
    1450:	55 1f       	adc	r21, r21
    1452:	f2 cf       	rjmp	.-28     	; 0x1438 <__fp_split3+0xe>
    1454:	46 95       	lsr	r20
    1456:	f1 df       	rcall	.-30     	; 0x143a <__fp_splitA>
    1458:	08 c0       	rjmp	.+16     	; 0x146a <__fp_splitA+0x30>
    145a:	16 16       	cp	r1, r22
    145c:	17 06       	cpc	r1, r23
    145e:	18 06       	cpc	r1, r24
    1460:	99 1f       	adc	r25, r25
    1462:	f1 cf       	rjmp	.-30     	; 0x1446 <__fp_splitA+0xc>
    1464:	86 95       	lsr	r24
    1466:	71 05       	cpc	r23, r1
    1468:	61 05       	cpc	r22, r1
    146a:	08 94       	sec
    146c:	08 95       	ret

0000146e <__fp_zero>:
    146e:	e8 94       	clt

00001470 <__fp_szero>:
    1470:	bb 27       	eor	r27, r27
    1472:	66 27       	eor	r22, r22
    1474:	77 27       	eor	r23, r23
    1476:	cb 01       	movw	r24, r22
    1478:	97 f9       	bld	r25, 7
    147a:	08 95       	ret

0000147c <__mulsf3>:
    147c:	0b d0       	rcall	.+22     	; 0x1494 <__mulsf3x>
    147e:	c4 cf       	rjmp	.-120    	; 0x1408 <__fp_round>
    1480:	b5 df       	rcall	.-150    	; 0x13ec <__fp_pscA>
    1482:	28 f0       	brcs	.+10     	; 0x148e <__mulsf3+0x12>
    1484:	ba df       	rcall	.-140    	; 0x13fa <__fp_pscB>
    1486:	18 f0       	brcs	.+6      	; 0x148e <__mulsf3+0x12>
    1488:	95 23       	and	r25, r21
    148a:	09 f0       	breq	.+2      	; 0x148e <__mulsf3+0x12>
    148c:	a6 cf       	rjmp	.-180    	; 0x13da <__fp_inf>
    148e:	ab cf       	rjmp	.-170    	; 0x13e6 <__fp_nan>
    1490:	11 24       	eor	r1, r1
    1492:	ee cf       	rjmp	.-36     	; 0x1470 <__fp_szero>

00001494 <__mulsf3x>:
    1494:	ca df       	rcall	.-108    	; 0x142a <__fp_split3>
    1496:	a0 f3       	brcs	.-24     	; 0x1480 <__mulsf3+0x4>

00001498 <__mulsf3_pse>:
    1498:	95 9f       	mul	r25, r21
    149a:	d1 f3       	breq	.-12     	; 0x1490 <__mulsf3+0x14>
    149c:	95 0f       	add	r25, r21
    149e:	50 e0       	ldi	r21, 0x00	; 0
    14a0:	55 1f       	adc	r21, r21
    14a2:	62 9f       	mul	r22, r18
    14a4:	f0 01       	movw	r30, r0
    14a6:	72 9f       	mul	r23, r18
    14a8:	bb 27       	eor	r27, r27
    14aa:	f0 0d       	add	r31, r0
    14ac:	b1 1d       	adc	r27, r1
    14ae:	63 9f       	mul	r22, r19
    14b0:	aa 27       	eor	r26, r26
    14b2:	f0 0d       	add	r31, r0
    14b4:	b1 1d       	adc	r27, r1
    14b6:	aa 1f       	adc	r26, r26
    14b8:	64 9f       	mul	r22, r20
    14ba:	66 27       	eor	r22, r22
    14bc:	b0 0d       	add	r27, r0
    14be:	a1 1d       	adc	r26, r1
    14c0:	66 1f       	adc	r22, r22
    14c2:	82 9f       	mul	r24, r18
    14c4:	22 27       	eor	r18, r18
    14c6:	b0 0d       	add	r27, r0
    14c8:	a1 1d       	adc	r26, r1
    14ca:	62 1f       	adc	r22, r18
    14cc:	73 9f       	mul	r23, r19
    14ce:	b0 0d       	add	r27, r0
    14d0:	a1 1d       	adc	r26, r1
    14d2:	62 1f       	adc	r22, r18
    14d4:	83 9f       	mul	r24, r19
    14d6:	a0 0d       	add	r26, r0
    14d8:	61 1d       	adc	r22, r1
    14da:	22 1f       	adc	r18, r18
    14dc:	74 9f       	mul	r23, r20
    14de:	33 27       	eor	r19, r19
    14e0:	a0 0d       	add	r26, r0
    14e2:	61 1d       	adc	r22, r1
    14e4:	23 1f       	adc	r18, r19
    14e6:	84 9f       	mul	r24, r20
    14e8:	60 0d       	add	r22, r0
    14ea:	21 1d       	adc	r18, r1
    14ec:	82 2f       	mov	r24, r18
    14ee:	76 2f       	mov	r23, r22
    14f0:	6a 2f       	mov	r22, r26
    14f2:	11 24       	eor	r1, r1
    14f4:	9f 57       	subi	r25, 0x7F	; 127
    14f6:	50 40       	sbci	r21, 0x00	; 0
    14f8:	8a f0       	brmi	.+34     	; 0x151c <__mulsf3_pse+0x84>
    14fa:	e1 f0       	breq	.+56     	; 0x1534 <__mulsf3_pse+0x9c>
    14fc:	88 23       	and	r24, r24
    14fe:	4a f0       	brmi	.+18     	; 0x1512 <__mulsf3_pse+0x7a>
    1500:	ee 0f       	add	r30, r30
    1502:	ff 1f       	adc	r31, r31
    1504:	bb 1f       	adc	r27, r27
    1506:	66 1f       	adc	r22, r22
    1508:	77 1f       	adc	r23, r23
    150a:	88 1f       	adc	r24, r24
    150c:	91 50       	subi	r25, 0x01	; 1
    150e:	50 40       	sbci	r21, 0x00	; 0
    1510:	a9 f7       	brne	.-22     	; 0x14fc <__mulsf3_pse+0x64>
    1512:	9e 3f       	cpi	r25, 0xFE	; 254
    1514:	51 05       	cpc	r21, r1
    1516:	70 f0       	brcs	.+28     	; 0x1534 <__mulsf3_pse+0x9c>
    1518:	60 cf       	rjmp	.-320    	; 0x13da <__fp_inf>
    151a:	aa cf       	rjmp	.-172    	; 0x1470 <__fp_szero>
    151c:	5f 3f       	cpi	r21, 0xFF	; 255
    151e:	ec f3       	brlt	.-6      	; 0x151a <__mulsf3_pse+0x82>
    1520:	98 3e       	cpi	r25, 0xE8	; 232
    1522:	dc f3       	brlt	.-10     	; 0x151a <__mulsf3_pse+0x82>
    1524:	86 95       	lsr	r24
    1526:	77 95       	ror	r23
    1528:	67 95       	ror	r22
    152a:	b7 95       	ror	r27
    152c:	f7 95       	ror	r31
    152e:	e7 95       	ror	r30
    1530:	9f 5f       	subi	r25, 0xFF	; 255
    1532:	c1 f7       	brne	.-16     	; 0x1524 <__mulsf3_pse+0x8c>
    1534:	fe 2b       	or	r31, r30
    1536:	88 0f       	add	r24, r24
    1538:	91 1d       	adc	r25, r1
    153a:	96 95       	lsr	r25
    153c:	87 95       	ror	r24
    153e:	97 f9       	bld	r25, 7
    1540:	08 95       	ret

00001542 <_exit>:
    1542:	f8 94       	cli

00001544 <__stop_program>:
    1544:	ff cf       	rjmp	.-2      	; 0x1544 <__stop_program>
